// Package template Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../template/add_cmd.tmpl
// ../template/datatable.tmpl
// ../template/exe_cmd.tmpl
// ../template/footer.tmpl
// ../template/index.html
// ../template/navbar.tmpl
// ../template/sidebar.tmpl
// ../template/sidebar_right.tmpl
// ../template/signin.html
// ../template/sql.tmpl
// ../template/table.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _add_cmdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x46\x13\xbe\xbf\xc0\xfb\x1f\xa6\x9b\x14\x92\xa0\x92\xb4\x0b\xf8\x22\x89\x02\x0c\xb7\x97\x22\x70\x92\xda\x37\xcb\x08\x56\xdc\xa1\xb5\xcd\x72\x97\xde\x5d\x2a\x52\x0d\xfd\xf7\x62\x49\x91\xa2\x28\x4a\xb2\xec\x04\x48\x3f\x78\x48\x44\xee\xcc\x33\x5f\xcf\x0c\x87\x1e\x31\x3e\x07\x63\x97\x02\x43\x92\x52\xc6\xb8\x7c\x18\xc0\xf9\x8f\x64\xfc\xff\xff\x01\x00\xe4\xc7\x91\xa0\xc6\x84\x24\x52\xc2\x4b\x98\x77\xfe\x73\x79\xb8\x23\x40\x35\xab\x9f\xb5\x9d\x7b\x33\xa4\x0c\x75\x53\x2c\x17\x9d\x5d\x94\x92\x89\x77\x46\xc6\x97\x8c\xc1\x95\x4a\x12\x2a\xd9\x28\x98\x5d\x34\x81\x03\xc6\xe7\xc7\x8c\x4d\x15\x5b\xb6\x9a\x8a\x95\x4e\x80\xb3\x90\x50\xc6\x3e\x45\x09\xfb\xe4\x1e\x10\x50\xd2\x64\xd3\x84\xdb\x90\x68\xb4\x99\x96\x50\xdc\x5e\x32\x76\x95\xb0\x6e\xaf\x0d\xaa\x69\x97\xcb\x34\xb3\xde\x83\x56\x59\x4a\xca\xc4\x26\x54\x3f\x70\x39\x80\x8b\x74\x31\xdc\x87\x91\xe3\x98\x94\xca\x16\x20\x2f\xd5\x98\xa2\xdc\x49\xee\x8e\x3e\x85\x99\xc6\x38\x24\x6f\x48\x89\x32\xb5\x12\xa6\x56\x7a\x0c\x63\x9a\x09\x0b\x8c\x1b\x3a\x15\x78\x14\xca\x5d\xeb\xe4\xc3\x35\x4d\xf0\x88\xe1\x80\x1e\x0a\x2b\x70\x71\x1d\x12\xc8\x63\x05\xbb\x4c\x31\x24\x16\x17\xb6\x72\xdf\x95\xc5\x8b\x94\xb4\x5a\x09\x02\x92\x26\x18\x12\xf7\x2f\x01\x8d\x8f\x19\xd7\xc8\xf6\x95\xa4\x85\x1e\xd5\xd9\x3f\xb3\x5c\xbf\xa0\x89\x34\x4f\x2d\x57\xf2\x3b\xaa\x16\xdb\x78\xf5\x5f\xd1\x76\xaf\x9b\x8f\xef\xbe\xa3\x62\x99\x47\xf1\xec\x22\xfd\xab\xca\x74\xbb\x4c\xbf\xf1\x08\x34\x28\x30\xb2\x87\x8a\xf3\x98\xa1\x5e\x1e\x2d\x4f\x05\xa8\xf2\x9e\x83\x39\x15\x19\x86\xe4\x8c\x8c\x7f\x5d\x60\x94\x59\x1c\x05\xc5\xc9\x69\xfa\xe7\x64\xfc\xd1\xd9\x7f\x86\xf6\x28\x28\x62\xf9\x7b\xf3\x67\x9a\x59\xab\xe4\xd7\xe0\xce\x07\xaa\x69\x82\x16\xb5\x39\xc6\xa0\xc2\xe6\xeb\x68\xb4\x27\x6c\x9a\x7e\x9d\xae\x71\x3b\x52\x24\x78\xf4\x39\x5f\x9d\xf2\xd0\xf6\xef\x45\xf5\xab\xff\xcd\xda\xe7\x19\x84\x2a\x37\xbd\xd4\xf9\x6b\xf6\xae\x71\x87\x81\xd6\x8c\x28\x46\x69\xb1\x18\xee\xcd\xd2\xf8\x26\x3f\xaf\x95\xb4\x65\x09\x0d\x5c\x97\xbf\x64\xad\x8d\x95\xb2\xa8\x49\x1e\x96\x5b\x5e\x35\x9a\xdc\xe8\xae\x8d\xdf\xf3\x13\x73\xd8\x46\xfd\xbe\xfc\x5d\xfd\x5f\xbc\xbd\xd7\xa7\x71\x26\xa3\x7c\x2a\x6c\x6a\x0f\x4f\x1b\xa0\x39\xd5\x90\xa7\x18\x42\xe8\x9c\xd6\xc9\x13\xd9\x69\x52\xa4\xd3\x56\x85\xca\xe7\x93\xde\x6b\x91\x4a\x12\x94\xd6\xd4\xa6\xe7\xc9\x06\x8f\x75\xd6\xa9\x80\x70\x74\xca\xd4\x7a\x8d\xa1\x28\xf2\x6d\x67\xdc\xf4\x5e\x66\xcc\x5d\xde\x8b\xbc\x2c\x59\x7c\x72\xce\x8a\xb6\x3d\x45\xad\xe0\x5d\x67\xb8\x11\x7f\xdb\x25\x6f\x6a\xbd\xdb\xf3\x8b\x84\x77\xf3\xfb\xde\x5a\x70\x55\x36\x58\xc5\xd0\x2a\x63\x53\x2b\xb7\x48\x3a\xb5\xd2\x4f\xa9\x46\x69\xaf\x15\xc3\xfa\x4f\x8d\x89\x9a\x63\x77\x3f\xe6\xf6\xd7\x60\x93\xf9\x54\x6b\x08\x2b\x77\xab\x8f\xca\x9e\x6f\x50\x73\x2a\xf8\x9f\x78\xa9\x35\x5d\x56\xf8\xa5\x1e\xa3\x96\x42\x08\x4f\xab\xda\x73\xf7\xec\x6e\x43\xdb\x7b\x08\xe1\xee\xbe\x76\x1e\x2b\x0d\x5d\xa7\xcc\x21\x84\xb3\x21\x70\x18\x39\xfb\xbe\x40\xf9\x60\x67\x43\xe0\xfd\xfe\x96\x7f\xa5\xad\x98\xa3\x60\x10\x3a\xd9\x3b\xee\x00\xb7\x45\x78\x0c\xdd\x5c\xc4\x77\x7d\x03\x61\x18\xc2\xc6\x89\x1d\xc0\x36\x47\xfd\x34\x33\xb3\x35\x46\xbe\x3a\xf4\xb6\x75\x56\x80\xc2\xe0\x5e\xa4\x8d\x71\x17\x72\x0d\x66\xd8\x80\x69\xf3\xbc\xf0\xa5\x58\x93\xee\x0b\xe7\xcf\x0e\x79\x5d\x49\x42\x4c\x85\xd9\x31\x71\xd8\xd3\x9a\xb6\xd5\x6d\xfe\xb5\xba\xfa\xd6\xa7\x7f\xd0\x45\xb7\x01\x9a\x69\x31\x20\x4f\x4f\x7e\xaa\x31\xe6\x8b\xd5\x2a\x88\x12\x46\x7e\xda\x96\x71\x93\x6e\x40\x3e\xbc\xbf\xb9\x6d\x9e\x38\x77\x06\xbf\xdd\xbc\xbf\xf6\x8d\xd5\x5c\x3e\xf0\x78\x99\xa7\xa2\xd7\x90\x33\x59\x14\xa1\x31\x83\x92\xce\xdd\xe2\xb5\xd1\x6b\x89\xf0\x0b\x97\x4c\x7d\xf1\xa9\x40\x6d\xbb\x64\xad\xf8\x03\xe9\x0d\x77\x45\x1d\xab\x0a\xb2\xac\xf3\x92\x7f\x9e\xdf\xef\x91\xb4\x10\x02\x19\x09\xbe\x9e\x78\x13\x22\xe9\xdc\xe3\x16\x93\x89\x9b\x69\x64\xdf\x96\x40\xda\x1e\xd6\xaf\x72\x71\x99\x90\x37\x93\xcd\xd8\x9c\x90\x77\x8a\xb2\x2b\x25\x2d\x4a\xdb\xed\x34\x32\x1c\x10\xe8\x43\x91\x03\xe8\x03\xe9\xf4\x26\x64\xcb\x2d\xc1\xe5\x67\x10\x8a\x32\xcf\xba\x5d\xef\x95\x1e\xe6\x5e\x6e\xe2\x8e\xf3\xb4\xcd\x3d\x1e\x29\x39\x21\xe3\x51\xc0\x5f\x8f\x9e\x8e\x47\x7c\xec\x82\xca\xeb\xd1\x07\xe2\x50\x47\x41\xfa\xba\xcc\x06\xf4\xc5\xfa\xa3\x40\xf0\x31\xd9\x99\x32\xb0\x9e\xea\x86\x33\x74\x73\x72\x33\xd3\x6d\x1b\xc3\xea\x35\xdc\xe9\x92\xa6\xc2\xaa\x41\x7a\xd4\x5a\xe9\x8a\xf2\x50\x72\xbe\xad\xad\xb7\x48\x5f\xc8\xf9\x1a\x4d\xaa\xa4\xc1\x5b\x5c\xec\xf8\x56\xef\xf1\x9e\x1f\x53\x2e\xb6\x46\xfb\xfa\x2f\x88\xf5\xd1\xb2\x72\x7b\xd5\x7a\xa1\xfa\x2b\x00\x00\xff\xff\xd4\xdd\x69\x0f\x79\x15\x00\x00")

func add_cmdTmplBytes() ([]byte, error) {
	return bindataRead(
		_add_cmdTmpl,
		"add_cmd.tmpl",
	)
}

func add_cmdTmpl() (*asset, error) {
	bytes, err := add_cmdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "add_cmd.tmpl", size: 5497, mode: os.FileMode(438), modTime: time.Unix(1580135384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datatableTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x5f\x6f\x9b\x30\x10\x7f\xaf\xd4\xef\xe0\x79\x95\x9a\x48\x33\xd6\xa6\x6a\x0f\x9d\xc3\xcb\xf6\x11\x26\x6d\x6f\x93\xc1\x06\x1c\x39\x98\x9d\x8f\xa4\x15\xe2\xbb\x4f\x10\x02\x4b\xb1\xab\x69\x4f\xe5\x21\xc1\xbe\xf3\xef\xcf\x99\x3b\xa1\xcc\x91\x18\xb5\xa3\xfa\x49\x1e\x1a\xab\x7f\x9d\x40\x36\x8d\x06\x4a\x72\x2b\xbd\xdf\x51\x25\x51\x7e\x97\x99\xd5\xfe\x12\x22\x0a\x59\xe6\x1c\x7a\x04\xd9\x3c\xd0\x74\x84\x98\xb2\xc1\x9d\xae\x37\x72\x67\x99\x3f\xb0\x8f\x9f\xc8\xf0\x76\x50\xec\x33\x4d\x05\x57\xe6\xf8\xaf\x59\xab\xdc\x38\x05\x4d\x05\x0e\x4a\xff\xf6\x33\xfb\x38\x47\xc6\x5f\x96\x39\x50\x1a\xb4\x9a\x96\x95\x3b\x0e\xae\x2e\x46\x29\x01\x67\xf5\x8e\x96\x60\x14\x4d\x6f\x6f\xc8\x8b\x47\x60\xa5\xa5\x0a\x06\x60\x3a\x3a\x6a\x5c\x27\x0c\x4f\xd7\x81\xac\x4b\x4d\x92\xdc\x59\x4f\xfa\x3e\x9c\x35\xf1\xa4\x5d\x97\xf4\xbd\xe0\x58\x45\xd1\x74\xad\x42\x20\x82\x23\x84\x24\xf2\xb8\xf8\xcc\xa9\xe7\x40\x60\x16\x0c\xee\xe4\x63\x7a\x45\x90\x6d\x05\xf1\xba\x5d\x35\xdb\x0d\x09\x5c\xc0\x22\x96\x49\xdc\xf6\x6b\x65\x8a\xd8\x16\x58\x38\x87\xe1\x5b\x7e\xab\x57\x1b\x50\x2c\xf8\xf8\x8d\x5f\x75\xd3\xed\xcd\xfc\xef\x73\x30\xcd\xe5\xcc\xdd\xa6\x68\xeb\x1c\x8d\xab\xc9\x66\x4b\xba\x05\xe8\x6e\x73\xff\x7e\xea\xa7\xfb\x6d\xf2\xed\xd2\x28\x9b\xee\x9a\x8b\x36\xb2\x34\x75\x49\x1f\x09\x42\xab\x3f\xbc\x08\x5a\x5d\x97\x58\x7d\xad\x86\x12\xd1\x47\x52\x48\xeb\x57\x39\x5e\x4b\xc8\xab\x33\x46\x30\x61\x6c\xdc\x38\x87\xa9\x0b\x17\x09\xc9\x16\xdd\x0f\xa3\xb0\x8a\x72\xe7\xe0\xac\xfd\xb9\x3e\xde\x6f\xbf\x9c\x17\xe3\x8b\xe0\x73\xcd\xc4\x3b\xc6\xc8\x5c\x0d\x4f\x18\x5b\x4a\x4a\x3c\xe4\x3b\xda\x75\x49\x03\xba\x30\x4f\x7d\xef\x51\xa2\xc9\xb9\x54\x07\x53\x5b\xd4\xbc\xb1\x6d\x69\x6a\xcf\x87\xb1\x33\x5e\x91\xe7\xfb\xdf\xad\x86\xe7\x64\x99\xb8\xc9\xde\x0f\x73\x70\x21\xfc\x6f\x6c\x96\xf9\x07\xbe\x3f\xef\x4c\xd8\xcb\x08\xbf\xa6\xf9\x13\x00\x00\xff\xff\x0b\xcb\xe9\xe7\x12\x06\x00\x00")

func datatableTmplBytes() ([]byte, error) {
	return bindataRead(
		_datatableTmpl,
		"datatable.tmpl",
	)
}

func datatableTmpl() (*asset, error) {
	bytes, err := datatableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datatable.tmpl", size: 1554, mode: os.FileMode(438), modTime: time.Unix(1580134439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exe_cmdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x5d\x4f\xdb\x30\x14\x7d\x47\xe2\x3f\xdc\x79\x4c\xa4\x62\x0d\x30\x89\x97\x0e\xf3\x30\xb4\x97\x69\x02\x34\xfa\x86\x10\x72\xe3\x9b\xc4\xc3\x76\x22\x7f\x74\x8d\xa2\xfc\xf7\xc9\x49\x43\xd3\x34\xdb\xa4\x45\x6a\x9b\x9e\x73\xee\x87\x4f\x4e\xae\xb9\x58\x83\x75\x95\x44\x4a\x4a\xc6\xb9\xd0\xd9\x02\x2e\x3f\x90\x9b\xe3\x23\x00\x80\x96\x4e\x24\xb3\x96\x92\xa4\x90\x73\xc5\xe7\x97\x9f\x7a\xf2\x40\xc0\x0c\x1f\x72\x53\xfc\x3c\x47\xc6\xd1\x8c\x65\xad\x34\xbf\xea\x95\x6a\x7e\x41\x6e\xea\x3a\x0e\x15\xf1\x52\x38\x89\x4d\x73\x7d\x9e\x5f\x4d\x55\x59\xc5\xa4\x0c\x62\x8e\x36\x31\xa2\x74\xa2\xd0\x41\xdd\xe1\xa3\x6d\xce\xb9\x58\xff\x6b\xc3\x55\xc1\xab\xc9\xfd\xd2\xc2\x28\x10\x9c\x12\xdc\xe0\x4b\xa2\xf8\x4b\x00\x08\x14\xda\xfa\x95\x12\x8e\x12\x83\xce\x1b\x0d\xb8\xc1\x5b\xc5\xa3\xba\x8e\x3b\xa2\x69\x66\x53\xfd\xfa\xf3\xdd\x16\xda\xa1\x76\x4d\x73\x28\x69\xc7\xae\xcc\x64\xb1\x61\x3a\x43\xe8\x5a\x7c\x17\xfa\xf5\xcf\xf5\xde\xb9\x42\xef\x1d\x51\x0a\xfd\x0a\x2b\xa7\xc3\x67\x5e\x1a\xa1\x98\xa9\x08\xb8\xaa\x44\x4a\xba\x9d\x5b\xfb\xef\x98\x6a\x8d\xef\x3a\x4c\x6e\x81\x9a\x4f\x0d\xbe\x3e\x0f\xde\xfc\x8f\xfb\x69\x51\x38\x34\xa4\xf5\x39\x78\x6c\xd0\x7a\xe9\xa6\xfc\xfb\xd1\x32\xf6\xef\x33\x86\xff\xfb\xfb\xb7\xdf\x2e\x2f\x5b\x36\xf5\x3a\x09\xd9\xe9\x1f\x9f\x37\x72\x06\xf5\xae\x93\x37\x12\x28\x9c\xd6\x75\xfc\x60\x30\x15\x9b\xa6\x39\x85\xb3\x80\x7e\xde\x69\xd6\xcc\x00\x4a\x54\x40\x81\x17\x89\x57\xa8\x5d\x9c\xa1\xfb\x2a\x31\xdc\xda\x2f\xd5\x92\x65\xc1\xd4\x88\x08\x5d\x7a\x47\x66\xa3\x5a\xa6\x2d\x50\x78\x7a\x1e\xc1\x02\x28\x5c\x0c\xb0\x5f\xb9\x90\x18\x09\x78\x47\x69\x3b\x2e\x96\xa8\x33\x97\xef\xad\x1b\x2e\xa6\x6d\x5c\x7a\x9b\x47\x41\xf4\x24\x9e\xe3\x35\x93\x1e\x87\x43\xc3\x25\xe0\x8c\xc2\xe5\x00\x6c\x8e\x8f\xf6\xe7\x73\xe6\x18\x50\xf8\xf6\x78\x7f\x17\x5b\x67\x84\xce\x44\x5a\x45\x4c\xdb\xd0\x6a\x27\x3d\x89\xd9\x4f\xb6\x89\x46\x4b\x78\x23\x17\xde\xc8\x8f\xfb\x68\xc8\xda\x82\x3c\xdc\x3f\x2e\xc9\x88\x09\xc3\x16\xe1\x6b\x84\x5b\x9f\x24\x68\xed\xa2\x7f\x4e\x51\x97\x8c\x59\x7d\x98\x8c\x93\x88\xbc\x1f\x64\x67\x16\xe7\x4e\xc9\x5e\x3f\x3a\xfd\x20\xbc\xcd\xfe\x71\xb6\x6f\x73\xca\xa4\xc5\x37\xa2\x09\xf1\xd9\xe6\xe6\x77\x00\x00\x00\xff\xff\xdc\x2d\x51\xeb\x3c\x05\x00\x00")

func exe_cmdTmplBytes() ([]byte, error) {
	return bindataRead(
		_exe_cmdTmpl,
		"exe_cmd.tmpl",
	)
}

func exe_cmdTmpl() (*asset, error) {
	bytes, err := exe_cmdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "exe_cmd.tmpl", size: 1340, mode: os.FileMode(438), modTime: time.Unix(1580134439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _footerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x81\xbc\x83\x96\xbb\xe3\xfb\x70\x0d\x85\x6d\xa7\xf5\xd6\x17\xd0\x6a\x3b\x16\x38\xd2\x88\x95\x96\xbc\x7d\x49\xdd\x42\x7d\xfb\x2d\xfd\xdf\x87\xdc\x87\x31\x70\x42\x62\xf8\x11\xd1\xb8\x80\x31\xbe\xef\x5c\x6a\xe1\x52\xb0\xd6\xc3\x30\x23\xb1\x69\x5f\x83\xef\x3b\x00\x80\x47\xef\x2c\xa0\x39\xc2\x42\x53\xd6\x56\x7c\x8c\x02\x5d\x5f\xcd\x54\x04\xd5\xb4\x85\x60\x58\x38\x42\x30\x75\x36\xc4\x85\x38\xbe\x60\xfb\x3b\xf2\xa6\x99\x78\x82\x4d\x56\xb8\x21\xeb\x13\x66\x03\x5d\xdf\x9d\x5f\x31\xe1\x5a\x14\xb4\xb9\x4b\x4c\xef\xea\xaa\x8b\xf0\xe4\x4f\x18\x22\xfc\x6d\x70\xbb\x6c\xb0\xd6\x9d\xea\x10\xf2\x12\xd3\x61\xc8\xaa\xff\xf5\xd3\x5a\x0c\x33\x71\xd1\x38\x92\x0c\xfe\xb8\x87\xdf\xf3\xf7\x48\xe2\x2c\xfa\xd1\xd9\x27\xa8\xef\x9c\x6d\x87\xfb\x7b\x00\x00\x00\xff\xff\x1a\x17\xaf\xd0\x2a\x01\x00\x00")

func footerTmplBytes() ([]byte, error) {
	return bindataRead(
		_footerTmpl,
		"footer.tmpl",
	)
}

func footerTmpl() (*asset, error) {
	bytes, err := footerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.tmpl", size: 298, mode: os.FileMode(438), modTime: time.Unix(1578216260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x6f\x6f\xdb\xb6\x13\x7e\x1f\x20\xdf\xe1\xaa\x5f\x5e\x24\x68\x28\xa5\xbf\xa6\xdb\x90\x59\x1e\xba\x36\x6b\x0b\x74\x5b\xda\xb8\x18\xf6\x6a\x38\x8b\x67\x8b\x0e\x45\xaa\x24\xe5\x24\x10\xfc\xdd\x07\x52\xf2\x1f\xc9\x76\x9a\x0d\xc1\x5e\x04\x31\xc9\xe7\xee\x79\x78\x77\x24\x4f\x83\x67\x6f\x7f\x7f\x33\xfa\xf3\xea\x12\x72\x57\xc8\xe1\xe1\xc1\xe0\x19\x63\x87\x07\xa3\x5c\x58\x10\x16\x10\xac\x43\xe3\xc8\x80\xa3\xa2\x94\xe8\x08\x4a\x9c\x52\x0c\x5f\x2c\x81\xf3\x20\x3f\x04\xa7\x1b\x1c\xdc\xeb\xca\x80\xa2\x5b\x28\x8d\x9e\x51\xe6\x60\x62\x74\x71\x78\x60\x33\x83\x2e\xcb\x63\x18\xad\x4c\xa6\xe4\x2c\x18\xc1\x41\x4f\x00\xa5\x04\x29\xd4\x8d\x05\x54\xdc\x9b\xce\x05\x27\x0b\x2e\x27\x50\x44\x9c\x38\x14\x68\x6e\xaa\x12\xb4\x92\xf7\xf1\xe1\x01\x63\x5e\xa8\x17\x0c\x12\xd5\x34\x8d\x48\x45\x61\x86\x90\x0f\x0f\x0f\x00\x00\x06\x05\x39\x84\x2c\x47\x63\xc9\xa5\x51\xe5\x26\xec\x87\xa8\xb3\xa6\xb0\xa0\x34\x9a\x0b\xba\x2d\xb5\x71\x11\x64\x5a\x39\x52\x2e\x8d\x6e\x05\x77\x79\xca\x69\x2e\x32\x62\x61\x70\x0a\x42\x09\x27\x50\x32\x9b\xa1\xa4\xf4\x45\xd7\x53\xee\x5c\xc9\xe8\x6b\x25\xe6\x69\x74\xc7\x2a\x64\x99\x2e\x4a\x74\x62\x2c\x69\xc3\xad\xa0\x94\xf8\x94\xbc\x69\x6b\xec\x84\x93\x34\x7c\xf7\x9a\x17\x42\x0d\x92\x66\xb4\x5a\x7c\xc6\x18\xfc\xa2\x95\x83\xd7\xb7\x64\x75\x41\xf0\x21\xd3\xca\x42\xd8\x7a\x00\xf8\x80\x81\x21\x99\x46\xd6\xdd\x4b\xb2\x39\x91\x8b\x20\x37\x34\x49\xa3\xba\x8e\x4b\x43\x13\x71\xb7\x58\x24\xd6\xa1\x13\x59\x82\x9e\x45\x3a\x4a\x4a\x59\x4d\x85\xb2\xc9\x44\x2b\x87\x8d\x6f\x36\x31\x44\x49\x66\x6d\x82\x52\xc6\x85\x50\x71\x66\xed\x6a\x8f\x5e\xc9\x28\xa7\x82\x20\x10\x3d\x81\x04\x2e\xac\x6b\xe8\xda\x99\x9d\x9c\x6f\xd1\xe1\x08\xc7\x92\x9e\x72\xd7\x1c\x1d\xba\xe0\x94\x8d\xed\x79\x10\xc1\x57\x3c\xf1\x58\x6b\x67\x9d\xc1\xf2\x7c\xa7\xa2\x77\x5a\x4f\x25\x85\xb4\x5c\xc0\xb5\xae\x4c\x46\x70\x8d\xca\xc2\x95\xd1\x7d\x8d\x8d\x24\x5f\x1a\xf6\x22\x09\xc1\xb6\xf1\x34\xd8\x63\x29\x6c\x9c\xe9\xc2\x93\xff\x34\xc1\x42\xc8\xfb\xb4\x71\xf6\xdc\x3b\x7b\x7e\x65\xf4\xc5\xcb\xb3\xb3\xd3\xf3\xe6\x4f\x9c\x7e\x7f\x76\x16\x6d\xed\xd9\xd7\x7b\xd2\x16\xfc\xe1\xc1\x60\xac\xf9\x3d\x64\x12\xad\x4d\xa3\x5c\x4b\xce\x9c\x41\x65\x85\x13\x5a\x81\x15\x9c\xc6\x68\x58\x21\x94\x08\x76\x5c\xcc\x97\xd8\x5b\x83\x65\x49\x66\x5d\x95\x75\xbd\x3a\xe9\x91\xc2\xf9\x18\x4d\xec\x8a\x52\x46\x10\x37\xa3\xc5\x62\x17\xb2\xa5\x58\x42\xdb\xe1\x1a\x1b\xc2\xf7\xa6\x39\x0a\xf0\x47\xc3\x19\x87\x09\x14\xaa\xbd\x11\xda\x93\xb2\x11\xc8\x0d\x9d\xed\x22\x5b\xea\x05\xc1\xd3\xa8\x40\xa1\x58\xbb\xb2\x4c\xd4\x16\xdb\x7b\x42\x4e\x06\x8e\xaf\x3c\x47\x1e\x06\x27\x6b\x8e\x7d\x3c\x0d\x70\xd3\xe9\x2e\x24\x0a\x45\x86\x4d\x64\x25\x78\x1f\xda\x87\x1b\x7d\x0b\xc5\x98\xfd\x7f\x17\x6e\xdb\xb5\x64\xb6\x60\xdf\xed\xc3\x06\x7c\xfe\x62\x09\x2f\xd8\x19\x38\xba\x73\x8c\xa3\xb9\x89\x86\xd7\xed\x8d\xed\x37\x3c\x48\xf2\x17\xfb\x08\x13\x2e\xe6\xc3\x10\xaa\x24\xce\xb4\xec\xc6\x64\x27\xca\xef\x61\x0b\xd5\xf3\xd3\x09\x4a\x2f\xce\x01\xd9\x4b\x53\x63\xb3\x0e\x79\x63\xd2\x03\xfd\x8a\x42\x6d\xd7\xc7\x9e\xdc\x3d\x6d\xd2\xf6\xe5\xa0\xae\x0d\xaa\x29\xc1\x91\x50\x9c\xee\x4e\xe1\x28\x43\xc3\xe1\x22\x85\xd8\xff\xb0\xbe\xf4\x77\x46\xbd\x97\x66\x39\x65\x2f\x1f\x4c\xf3\x26\x1e\xcd\x4e\xc5\x0f\xe1\xf7\x14\xf2\x4e\xd3\xfc\xd5\x46\x45\x45\xc3\xba\x0e\x7b\x8a\x47\xfe\x61\x5a\x2c\x06\x49\xfe\xea\x5b\xe4\xbd\x04\x3f\x4a\xa0\xbf\xb9\xa2\x4e\xca\xf7\x9a\x96\x1d\x43\x5f\xf2\x6b\x95\xed\x71\xf7\x3a\xcb\x47\x79\x5b\x25\xd0\x5f\xd7\x82\x9f\x36\x3f\x7c\x06\x1b\x87\x1f\x85\xba\xd9\x97\xc5\x2d\x65\xb8\x7a\x82\x82\x97\xf8\xbd\xa1\xc9\x62\x11\x75\xf4\xfa\x85\xa0\x37\x20\x7e\xc3\x22\x04\x15\x1f\x91\x99\xba\x26\xc5\xbf\xa5\xe5\x5b\xc1\x7f\x68\xfd\xa1\xb5\xbd\xe4\xfb\x8c\xfe\x8b\xcb\x62\xe3\x91\xd8\xc0\xf5\x2e\x94\xf6\xad\xd8\xbc\x51\x76\xbc\x59\x7f\x19\x31\xcd\x5d\xf3\x72\xed\x7e\xdc\x26\x5a\x3b\x32\x6b\xc4\x92\x32\xd0\xc5\x49\x8f\x26\xcc\x7e\xbe\xfc\xf4\xe5\xc3\xe7\xcb\xb7\x70\xfd\xe6\xf3\x87\xab\xd1\x75\x67\x71\xf6\xa9\x22\x73\xdf\x4c\x0d\x6c\x66\x44\xe9\xc0\x9a\xec\x71\x0d\xcc\xec\xab\x37\x6e\xff\x85\x2e\x65\x66\xa3\xe1\x20\x69\xfc\x2c\x55\xfd\xbc\x6c\x64\xe0\xfc\x5f\xf2\xac\x5a\xa1\x64\xb6\x31\x88\xc7\x95\xe2\x92\xf6\xf2\x86\x5e\xf6\xe3\xe8\x12\x5e\x97\xe5\x3f\x24\x0e\x4d\xe1\xac\xd7\x13\xf6\x38\x56\xee\xda\x84\x4f\x2a\x95\x85\x16\xe7\xa3\x46\xde\xde\x00\xc7\x95\x91\x27\x50\xaf\x2b\xe7\x28\xc6\x19\xde\x1d\xd7\xdd\x4a\xac\x8c\xbc\xa8\x8c\x3c\xed\xce\xda\x2a\xcb\xc8\xda\x8b\xa5\xe3\x63\x43\xb6\x92\xee\xa4\xde\x2e\xf3\xa3\xe3\xe8\x7f\x9d\x06\xe4\x24\xf6\x5f\x24\x4b\x8b\x1f\xbb\x16\x8b\xc5\x72\x26\x14\xd0\x3a\x6a\x89\xbf\xff\x9a\x66\xae\xf9\x00\xfb\x3b\x00\x00\xff\xff\x6c\x1f\xc3\x9d\x92\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3474, mode: os.FileMode(438), modTime: time.Unix(1580136556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _navbarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xcb\x8a\xdb\x40\x10\xbc\x1b\xfc\x0f\x93\xf1\xb9\xad\x1f\x90\x04\xb9\xe5\x10\x12\x48\xbe\xa0\xe5\x69\x49\x8d\x47\x3d\x66\x1e\xb2\xc1\xf8\xdf\x83\x24\xcb\xc8\xc4\x6b\xb3\xec\xae\x2e\xc3\xd0\xd5\x5d\xd5\xaa\x9a\xfc\x1b\x80\xfa\x85\x7d\x85\x5e\x01\x94\xeb\x55\x2e\xd8\xab\x9d\xc5\x10\x0a\xdd\x21\x0b\xb4\x84\x86\xbc\x92\x09\x33\x1d\x40\xa7\x03\x8a\x99\x6f\xc7\x96\x23\xcd\x17\xcb\x4d\x1b\x75\xb9\x5e\x29\xa5\xd4\x38\xfe\x27\xd5\x71\xee\xb7\x2c\xfb\x30\x31\x8d\xf5\x64\x67\xb2\x6b\xbb\x60\x3f\x37\x8f\x00\xcb\x0b\x00\x70\xa4\x6e\x59\x1e\x21\xb8\x44\x0c\x04\x5a\x19\x8c\x08\x47\x36\x0d\xc5\x42\x1f\x52\x68\x3b\x92\xa4\x55\xeb\xa9\x2e\xf4\x46\x97\xf9\x6d\x6a\x8d\x41\xd5\x08\x15\xfa\xa0\xcb\x3c\xe3\x32\xcf\x70\xc9\x9f\x59\x7e\x2e\x47\x19\x10\x27\xa4\x0c\x84\x0e\x58\x2c\x0b\x41\x65\xdd\x6e\xff\x40\xe7\xc4\x7f\x3e\x6f\x0f\x9e\x6a\x3e\x5d\x2e\xfa\x3f\xe9\xe5\x0f\xd7\xd1\xd7\x6b\xd8\x3c\x60\xfe\x5e\xb9\x14\xdf\xa4\xce\xb3\x64\xcb\xf5\x6a\xe1\xeb\x9f\xc1\xe9\xf7\x18\xab\x3a\x0b\x98\xa2\x7b\x61\xf0\x87\xfe\x68\x16\xb8\x11\x97\xe2\x83\xfd\xfe\x72\x23\xbf\x9f\x6c\xf8\x59\x79\xdb\x39\x89\xde\x59\x08\x6c\xa8\x42\x7f\xad\x06\xcb\x86\x0a\x1d\x7d\xa2\xbb\x20\xde\x0f\x5f\x7e\xf7\x09\x8d\x2d\x58\xf4\x0d\xbd\x48\xe9\xd5\xa6\x3c\x13\xec\x87\x73\x30\x2a\xdb\xca\xed\x85\xff\x0b\x00\x00\xff\xff\xb8\xfb\xd4\x65\xf1\x03\x00\x00")

func navbarTmplBytes() ([]byte, error) {
	return bindataRead(
		_navbarTmpl,
		"navbar.tmpl",
	)
}

func navbarTmpl() (*asset, error) {
	bytes, err := navbarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "navbar.tmpl", size: 1009, mode: os.FileMode(438), modTime: time.Unix(1580134439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x4d\x6f\xe3\x36\x10\xbd\x07\xc8\x7f\x98\xaa\x01\xb2\x01\x4a\x0b\xe8\xf6\x54\xc8\x02\xb6\x7b\xe8\x25\x5b\xb4\xdd\x02\x3d\x2e\x46\xe2\xc8\x26\x4c\x0e\x55\x8a\xb6\x13\x18\xfa\xef\x05\x29\xc9\xb1\xfc\x99\x64\x51\x20\x5d\x1d\x14\x1b\x9c\x8f\x37\xc3\x79\x2f\x9e\xec\x3b\x21\xe0\x13\x2a\x86\xcf\x4a\x52\x81\x0e\x3e\x5a\xf6\xa8\x98\x1c\x08\x91\x5f\x5f\x65\xd8\x28\x49\x50\x6a\x6c\x9a\x69\x62\x50\xb1\x68\x7a\xcb\xfe\xaf\x90\xe8\x16\xa2\x76\xca\xa0\x7b\x04\xd2\xb4\x42\xaf\x2c\x8b\x9f\x92\xfc\xfa\x0a\x00\x20\xe6\xf8\xc5\x21\x4b\xb8\xb7\x33\xdb\xc5\x8d\x07\x08\x73\x47\xd5\x34\xf9\x3e\x19\x12\x14\xc1\x4c\x68\xc5\x8b\xc1\x3b\x1a\x36\x35\xf2\xd8\xc4\xd3\x83\x87\xca\xb2\x17\x6b\x52\xb3\xb9\x17\x3a\xbc\x93\xfc\xd7\x0f\xd2\x28\xce\xd2\xe0\x31\xa4\x49\x31\xbf\xbe\xda\xc1\x32\x94\xfa\x04\x44\xaa\xd5\x10\xbe\xaf\x6a\x94\x7e\xd7\x69\xd9\x90\x83\x1a\x99\x34\xbc\xb3\x75\xa8\x14\xf5\xdd\x53\xa8\xfd\x70\xc1\x5c\x74\xe6\xc6\x8b\xf7\x50\x17\xe2\x3d\x98\xf0\x92\xa2\xd2\xf4\xb0\x9b\x67\xdf\x57\x71\x65\xf7\xcf\x4f\xf4\x4d\x8a\x42\xdb\x72\x91\xe4\x9b\xcd\x24\xa4\x64\x34\xd4\xb6\x5d\xe5\x23\xd7\x54\xaa\xd5\x2e\xd4\xfe\xfb\x89\x62\x3f\x11\x2f\xf7\x6a\x63\xdc\xe2\x33\x5e\xfc\x78\x80\x7f\xa9\x87\xe3\x60\xc9\xb8\x12\xb5\xd2\xba\x89\x9f\x86\xc9\x09\x85\x8b\xd2\xea\xa5\xe1\x04\x24\x7a\x14\x6b\x25\x67\xe4\xa7\x89\x77\x44\x2b\x45\xeb\x04\x9c\xd5\x34\x4d\x0c\xf1\xb2\x37\xc1\xb2\xb4\x4e\x2a\xcb\xd3\xa4\x42\xdd\xd0\xd1\xce\x04\xf0\x1f\xa4\x04\x55\x5a\x6e\xc0\x5b\xf0\x73\x82\x30\x4e\x0d\x2c\x1b\xc5\xb3\xf8\x7d\x12\xb0\x04\x8b\x0e\xe9\x61\x98\xf8\xac\x95\x9f\x77\x13\x86\x6b\x6a\xac\x21\xb0\x0e\x90\x1f\xc1\xfa\x39\xb9\x98\x21\x1e\x83\x56\x85\x0b\xa3\x3f\xea\xd3\x16\x91\x56\x3b\xfd\x10\xca\x93\x81\x39\x36\x62\x5b\xe8\x11\x9f\x13\x77\x1c\xfc\xf7\x99\x71\xe0\x36\xce\x16\x31\x62\x03\x50\xa1\x08\x4d\x2c\x30\xf4\x2d\x4b\xd5\xb9\x10\xf5\x99\xc3\xf0\xfc\x85\x85\xa6\x53\x5d\x3b\xc0\xe1\x02\x2f\x23\x88\x0a\x05\xf2\x4c\x93\xd0\x54\xf9\x8b\x28\xd2\x53\x30\x0e\x87\x7a\x7b\x72\x38\x7b\x97\xda\x1c\x9e\xcd\x06\x6e\x6a\xf8\x79\x0a\x93\x30\x9f\xbf\x3b\xaa\xd4\x03\xb4\xed\x05\x07\x47\xd1\xa5\x7e\x8e\xb9\x43\x9e\x11\xdc\x28\x96\xf4\xf0\x03\xdc\x90\x26\x43\xec\xa3\xbf\x8f\xcd\x3c\xeb\x0f\xc7\xc7\xe8\x5c\x49\x5b\xb7\x9d\x29\xb2\x5c\x6a\x55\x2e\xa6\xc9\xbd\x45\x19\x54\x9e\xd8\xbf\xbb\xdd\x6c\x42\x29\x6d\x9b\x76\x5d\x88\x1f\x06\x80\x6d\x7b\x7b\x77\x30\x7d\xa0\x2d\x4a\x11\x61\x3f\x07\x01\x8c\x86\xa1\x0a\xe4\x47\x51\x2a\x57\x6a\x82\x61\x44\x2f\xcd\xc2\x28\x56\x9d\xef\x02\x3c\x3d\x26\x23\xa7\x93\x23\xf3\x64\xa1\xcf\x21\xd8\x6c\x88\xe5\xa9\x3b\xca\xd2\xa5\x3e\xc6\xfc\xe3\x21\xdf\x86\x20\x54\x28\x3c\x96\x73\x6b\xc8\x93\x13\xa8\x2f\xf3\xf1\x52\x9f\x3f\x5a\x63\x90\xe5\xff\x4d\x17\x40\xc9\xee\x7f\xfe\x97\xd2\xc8\xb3\x8d\x7c\x39\x03\x9f\xc3\xbe\x5e\x40\xda\x36\x2d\x8d\xfc\x7a\xba\x8d\xa9\xf6\x52\x82\x65\x75\x9e\xa9\x3c\x2b\x72\x94\x12\x98\xd6\x50\x76\x97\x9a\xa5\x45\x8c\x70\x99\x6d\xe7\x99\x76\x91\x65\x83\x50\xca\x5e\x25\xa3\x44\xf6\x20\xde\x82\x48\x96\x46\x06\x7d\x54\xf2\xbf\x91\xc6\x57\x0b\xe2\xe4\xb7\xfe\xf7\xde\x37\xa0\x86\xaf\x11\xc0\x67\xd0\xcb\xe1\xfa\x4b\xf3\x8f\xbe\xbd\x7b\x9d\x5a\x2e\xe8\xb1\xb0\xe8\xe4\x57\xeb\xe4\x9f\xb8\x86\xcf\x7f\xdc\x5f\xb8\x80\xdd\x85\xa7\x53\xca\x02\xe5\x8c\xba\xb7\x90\x81\x26\x2e\xc9\xff\x46\xc7\x8a\x67\xa3\x6d\xe7\x68\xb8\x17\x8a\x66\x7f\x59\xfb\xab\xc3\xe8\x62\xb3\x94\x71\xb5\xbf\x24\xa5\x93\x61\x29\x34\xa3\xcd\x61\x77\xed\x18\x1b\xf6\x5b\x66\x1a\xd7\xcc\xfc\xdf\x00\x00\x00\xff\xff\xa7\x35\x3e\x5a\x8f\x0e\x00\x00")

func sidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarTmpl,
		"sidebar.tmpl",
	)
}

func sidebarTmpl() (*asset, error) {
	bytes, err := sidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar.tmpl", size: 3727, mode: os.FileMode(438), modTime: time.Unix(1580136436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebar_rightTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x4d\x0e\x83\x20\x10\x85\xf7\x26\xde\x61\xea\x7e\xca\xa2\x71\x47\xd9\xf4\x08\xf6\x02\x54\x26\x85\x94\x08\x61\x88\xe7\x6f\x40\x49\xd4\xdd\xfc\xbc\xf9\xde\x3c\x79\x43\x84\x57\x58\x72\x0a\x1e\x26\x67\xe8\xa3\x13\x20\xaa\xbe\x93\x9a\x9d\x21\x98\xbd\x66\x7e\x0e\xf3\x26\x41\xde\x25\x97\x1e\x8d\x4e\xbf\x41\xf5\x1d\x00\xc0\x89\x79\x3c\xa0\x25\xc3\x37\x10\x83\xa5\x44\x9b\x4b\xd5\x1b\xb7\x36\x9f\x88\x8f\x86\xa9\x2b\x3b\xaa\xb7\xcb\x9e\xa4\xb0\xe3\x71\x1e\xd5\x74\x06\x4b\x11\x1b\x4e\x18\xb7\x96\x00\xa2\x26\x28\x55\x79\x48\xdc\xaf\x19\x10\xd5\x3f\x00\x00\xff\xff\x21\x32\xef\x13\xff\x00\x00\x00")

func sidebar_rightTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebar_rightTmpl,
		"sidebar_right.tmpl",
	)
}

func sidebar_rightTmpl() (*asset, error) {
	bytes, err := sidebar_rightTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar_right.tmpl", size: 255, mode: os.FileMode(438), modTime: time.Unix(1578194347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signinHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5b\x6f\xdb\x36\x14\x7e\x0f\x90\xff\xc0\xb2\xdd\x9a\x00\xa5\x64\x27\x4d\x5b\xa8\xb2\xb1\xed\x65\xd8\xd3\xba\xb5\x7b\x1a\x86\x81\x12\x8f\x2d\x26\xbc\xa8\x24\x95\xd8\x29\xf2\xdf\x07\xd2\xa2\x2d\xd3\x72\xea\x29\x40\x24\xf2\x5c\xf8\xf1\x3b\x17\xd2\xe5\x0b\xa6\x6b\xb7\x6e\x01\x35\x4e\x8a\xf9\xf9\x59\xe9\xdf\x48\x50\xb5\x9c\x61\x50\x38\xcc\x00\x65\xf3\xf3\x33\x84\x10\x2a\x25\x38\x8a\xea\x86\x1a\x0b\x6e\x86\x3b\xb7\x20\x1f\x70\x94\x39\xee\x04\xcc\x3f\xf3\xa5\xfa\x4d\x95\xf9\x66\x74\x7e\xd6\x0b\xad\x5b\x87\x21\xea\x9f\xac\x62\xa4\x15\xb4\x86\x46\x0b\x06\x86\x70\xb9\x44\xdf\x76\x62\xff\x2c\xb4\x72\xc4\xf2\x47\x28\xd0\x34\x9b\x5e\xdd\x18\x90\x1f\xf7\x35\x1c\xac\x1c\xa1\xaa\x6e\xb4\x29\x90\xe4\x8c\x09\x48\x34\xc8\x03\x54\x77\xdc\x91\xce\x82\x21\x16\x04\xd4\xae\x40\x4a\xab\x03\x3d\xa9\x1f\x4f\x50\xb2\xdf\xd5\x79\x4e\xfe\x14\xd9\xf0\xcf\x4f\x12\x18\xa7\xe8\x42\x72\x45\x1e\x38\x73\x4d\x81\xde\xbf\xfb\xd0\xae\x2e\x53\x1a\x46\x98\x22\xe2\x80\xac\x84\xb0\xeb\x6c\x84\xae\xa7\x23\x50\x7c\xc8\xdf\xec\x86\x95\x66\xeb\xd4\x7d\x03\x7c\xd9\xb8\x02\x4d\x27\x93\x1f\x8e\xed\x68\xcc\x8e\x71\xdb\x0a\xba\x2e\x02\x77\x0b\x01\xab\x4a\xaf\x3e\x1e\x51\xf1\xe2\x11\xc6\xfd\x34\xa1\x82\x2f\x55\x81\x6a\x50\x0e\x4c\xa2\x14\x64\x84\x3b\x90\xf6\x88\x46\x4b\x19\xe3\x6a\x49\x9c\x6e\x0b\xf4\x76\xd2\xa6\xcb\x44\x79\xa5\x9d\xd3\x72\x54\xa5\xa2\xf5\xdd\xd2\xe8\x4e\x31\x52\x6b\xe1\xf3\xed\xe5\xe2\xc6\xff\x1d\x63\x23\x5b\x68\x23\x89\xe5\x4b\xc5\x55\xca\x4a\x1f\xef\x84\x4c\xff\x48\xba\x8a\xd9\x70\x7d\x7d\x14\x68\x81\xa6\x37\x07\x32\x49\xcd\x92\xab\x02\xd1\xce\xe9\x7d\x50\xa3\x90\xb2\xba\x81\xfa\xae\xd2\xab\xd1\xb2\x7b\xe8\xe3\xfd\x76\x32\x39\xc5\x57\x18\xd4\x5a\x39\xa3\x45\xea\xaf\xd5\x96\x3b\xae\x55\x81\x0c\x08\xea\xf8\x7d\x5a\x32\x95\x5e\xf9\xac\x0d\xfb\xaa\xb4\xf1\x39\x7e\x98\x25\x31\x01\x93\xdd\xed\x93\x72\x48\xd8\xb0\x87\xbc\xdb\x93\x9e\xb4\x97\x62\xa1\xeb\xce\xa6\x3b\x7a\x24\x5c\x31\x58\x15\xe8\xea\x04\x7f\x5c\xb5\x9d\xfb\xdb\xb7\xd8\x19\x06\x49\xb9\xc0\xff\xa4\xfe\x36\x91\xdb\x66\x1f\x99\x1e\x66\x5f\xa4\xc5\x6b\x10\xe3\xa9\x20\x86\x32\xde\xd9\x02\x4d\x9e\xd5\x15\xb0\x18\x57\x3d\x05\x6f\x4b\xad\x7d\xd0\x86\x7d\x17\xf2\x08\xf3\x3d\x0c\xa7\xdb\xe3\x18\x12\xbd\xe3\xfb\xea\xc1\x96\x79\x3c\x46\xfa\xf1\x0b\x42\xd0\x97\x06\x24\xa0\x20\x40\x84\xc4\xc3\x48\x70\x75\xe7\x13\x6e\x86\x83\xc4\x36\x00\x0e\xa3\xc6\xc0\xc2\xcf\x50\xc7\xeb\x9c\x32\xc9\x95\x70\x90\x33\x6e\x5d\x5e\x5b\xbb\x9d\xc9\x24\x57\x59\x6d\x6d\x38\xfe\xf2\xfe\xfc\x2b\x43\x7f\xab\x05\xb5\x76\x86\xc3\xc9\xb3\xe9\x35\xc8\xf7\x65\xe2\x0c\x55\x9b\x3c\x47\x42\x7b\x6a\x5a\xba\x84\x60\xef\xc9\x45\x9c\xcd\xb0\x27\xb8\x6b\xff\xf5\x63\x1c\xfd\x0c\x98\xc7\x48\x2b\xdb\x55\x92\xbb\x19\x36\xe0\x3a\xa3\xd0\x66\xb8\x39\x51\x2f\x2e\xb7\x07\x2d\xe3\xf7\xd1\x7e\xb3\x96\xd0\x4b\x8d\x07\x87\x6b\x49\xfb\x9d\xbe\xc4\xf3\xb2\x9a\xff\x5a\xe6\xd5\xfc\x67\xbf\xb7\x32\xa7\xd1\x49\xce\xf8\x7d\xfc\x6e\xa6\xd1\x5f\x73\x8d\x64\x45\xae\x87\x4d\x80\x28\x6d\x24\x15\x78\xfe\x49\x00\xb5\x80\x3c\x5a\xe4\x5d\x35\xd3\x2d\xd9\xb4\x02\x81\x16\xda\xcc\x70\x48\x9f\xbf\x2c\x18\x45\x25\x6c\xb7\x69\x0d\xd1\x4a\xac\xf1\x3c\x4a\xca\x3c\xd8\x44\x07\xc1\x2a\x90\x94\xd8\xfb\xff\x33\xdc\xa5\xfe\x86\x35\x8a\xd1\xe0\x74\x9c\xe1\x9d\xad\x81\xaf\x1d\x37\xc0\x42\xcf\x08\x85\x7c\x0c\xef\xa7\x98\xe7\x07\x78\xa3\x64\x14\x6f\x52\x24\x3b\xfc\x3b\x7f\x1b\xfc\x6d\xea\xff\x19\xfc\x3b\xdb\x88\x7f\x24\xec\xdb\xde\xed\x83\xb5\x17\xf9\x21\xcc\xed\xe4\x10\x6e\x34\xc5\xe8\x9e\x8a\x0e\x7c\xae\x49\x90\x15\x98\x08\x76\x3b\x9e\xa3\x3f\xfb\x4f\x24\x61\xb0\xc4\x3e\x15\xc3\x3c\xaa\x3a\xe7\xb4\x8a\x20\x2b\xa7\x50\xe5\x94\xbf\xac\xf8\x57\x6b\xb8\xa4\x66\x1d\xbe\x2b\xa1\xeb\x3b\xdc\x23\xda\x64\x39\x0e\x37\xc7\x90\x58\x1b\x37\xd1\x69\x1b\xfd\x49\x47\x6e\x36\xd9\x19\xaa\x4f\x76\x0e\x18\x9e\xff\x58\xeb\x76\xfd\x11\x5d\x4d\xa6\xef\xc9\xd5\xe4\x6a\x52\xe6\x6d\xa8\x5a\x4f\x71\xf8\xf0\x65\x1b\x3a\x46\x69\x6b\xc3\x5b\xd7\xfb\x5d\x74\xaa\x0e\xe5\xba\x5f\x64\xc3\x46\xf7\x2a\xa3\xb7\x74\x75\x91\xb4\x3e\x0f\xba\x40\xf8\xd3\xef\x9f\xbf\xe0\x37\xc9\xe5\xcf\x88\x02\xe1\x6f\xdf\xb2\xd6\xc0\x82\xaf\x9e\x9e\xf2\xbe\xb4\x13\x3d\x46\x1d\x2d\xd0\xab\x8b\xd7\x2f\x07\x3d\xe1\xf5\x65\x66\xc1\x70\x2a\xf8\x23\x5c\x5c\x26\x16\xb6\xab\x6b\xb0\xb6\xd8\xc1\xbe\x30\x60\x3b\xe1\x0e\xae\x8b\x28\xdc\x2f\x14\xd3\x0f\x99\xd0\x35\xf5\xba\x99\x6f\x06\x68\xb6\x87\x0c\xa7\x77\xc3\x64\x41\x30\xc6\x5f\x72\x4e\x5a\x8e\x0a\x30\xae\x57\xc8\x0c\xd8\x56\x2b\x0b\x5f\x60\xe5\x2e\x9f\xb9\x80\x0e\x65\x7d\xbb\x5b\x50\x61\xe3\xe5\xe0\xc9\x87\x6e\x1b\xb0\xf3\xb3\xd0\xea\x6f\xff\xe8\xc0\xac\x37\x5d\xbe\x8f\x26\xb2\xa6\x3e\xec\xe8\xad\xe8\x96\x5c\xd9\xfc\xf6\xab\x37\xe8\x5f\xa1\xab\xdf\x5a\x3c\x1f\x38\x0e\x6e\x7f\xd1\xda\x59\x67\x68\x8b\xde\xfe\x0f\xdf\x55\xb4\xca\x6f\x07\x83\xac\xea\x14\x13\x30\xba\x56\xde\xff\xc6\xfa\x2f\x00\x00\xff\xff\xf1\x15\xf5\xe1\x75\x0d\x00\x00")

func signinHtmlBytes() ([]byte, error) {
	return bindataRead(
		_signinHtml,
		"signin.html",
	)
}

func signinHtml() (*asset, error) {
	bytes, err := signinHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signin.html", size: 3445, mode: os.FileMode(438), modTime: time.Unix(1580134440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4f\x6f\x9b\x4e\x10\xbd\x47\xca\x77\x98\xdf\x26\x3f\xd9\xa8\x05\xe2\x46\xbd\x60\xec\x4b\x15\xa9\x87\x48\x4d\xe2\x4a\x3d\x56\x6b\x18\x87\x6d\xd6\xac\x3d\xbb\x18\x5b\x96\xbf\x7b\xb5\xc0\xc6\xf8\x0f\x49\x54\x4e\xec\xcc\x9b\x9d\xf7\x66\x1e\xc4\xff\xf9\x3e\x7c\x53\xb9\xc1\xdc\xc0\x77\xe4\x29\x12\xf4\x1f\xf8\x33\x42\x56\x1d\x3c\xf0\xfd\xf1\xe5\x45\xac\x31\x31\x42\xe5\x90\x48\xae\xf5\x88\x25\x75\x85\x5f\x83\xd8\xf8\xf2\x02\x00\x20\xce\x06\x0e\x30\xf7\x6f\xc0\xe0\xda\xf8\x29\xa7\x17\x97\xb7\xcf\xdd\x1a\x93\xc2\x20\x3c\xf1\x12\x26\x8f\xf7\xfb\x44\xac\xe7\x5c\x4a\xd0\x66\x23\xd1\x36\x90\x8a\x22\x20\x4c\x87\x6c\xfc\x8b\x53\x2e\xf2\xe7\x08\xb0\x29\xe6\x06\x36\xaa\x20\x50\x65\x0e\x24\xf4\x4b\x1c\x56\xc5\x8e\x46\x98\x0d\x2c\xe7\xb0\x21\x6d\xdf\xad\xcc\x30\x38\xa4\xfd\xa6\xb4\x57\x4d\xa9\x58\xb9\x14\xa9\xb2\x2d\xa5\x9d\x4a\x94\xf4\xe7\xa9\x3f\xf8\xd2\x06\x9c\x80\x38\xa5\xc7\xf9\x73\x18\xc7\xaf\x14\x26\xf3\xa7\x8a\x5a\x23\x3e\x29\xcd\x6e\x5d\xe5\x54\xad\x7d\x23\x8c\x44\x36\xbe\xcb\x0d\x52\x3d\xa2\xc9\xe3\x3d\x2c\x0b\xa4\x4d\x10\x87\xd9\xed\xb9\xe6\x61\x2a\x56\xe7\xe2\xf5\xc8\xec\xad\xed\x71\xbd\xcb\x7d\xaa\xd2\x4d\x27\xdb\xf3\xad\x5e\xd3\xd6\x31\x9c\x90\x83\x48\x47\x0c\xd7\xf8\x5b\x2f\x25\x03\x52\xa5\x1e\xb1\xaf\x0c\x16\x92\x27\x98\x29\x99\x22\x8d\x18\xee\x35\xea\xa5\x6c\x34\x06\x01\x73\x0e\x2a\x45\x6a\xb2\x08\x06\x37\x37\xff\x0f\xd9\x38\x0e\xdd\xdd\x5d\xd4\x3a\xc6\xf0\x11\xda\x1c\x32\xc2\xd9\x88\x5d\xb1\xd7\x5d\x98\x1c\xa6\x26\xf7\x17\x24\xe6\x9c\x36\x0c\x54\x9e\x48\x91\xbc\x54\xaa\x26\x8f\xf7\xfd\x5e\xd8\xc8\xeb\x79\x6c\xdc\xd8\x3a\x0e\xbb\xc8\xfd\x7b\x97\x6a\x2c\xae\x4f\x75\xe8\xee\xd2\xe9\x84\x26\xde\xe1\x91\x20\xb4\x1e\xb1\x6b\xff\xa0\x43\x66\x4a\x99\x37\x1c\x6d\xe1\x76\xff\x84\xba\x90\x46\x77\xe1\xec\xf3\x54\x43\xde\x96\xd3\x91\xad\xed\x4d\xaa\xec\x60\xfd\xfe\x67\x51\xeb\x38\x2d\x3f\x2e\x6d\x9f\xdd\xfb\xc1\xcf\x49\x27\x24\x16\xa6\x41\xcc\x8a\xbc\xfe\x1f\x35\x3b\x2c\x48\x7a\xb0\xdd\xdf\xb6\xe2\xb5\xe1\x47\x70\xdd\x67\x57\xee\x23\xf1\x82\x15\x97\x7d\x6f\xb8\xc7\x15\x64\x31\xbd\xed\x36\x58\x10\xce\xc4\x7a\xb7\xeb\xc1\x27\x1b\x6d\x61\xae\x03\xfe\x87\xaf\xfb\xdb\x43\xfe\x05\xc9\xa8\x20\xf9\xf9\x30\x6a\x36\x0b\x8c\xd8\xc3\x8f\xc9\x4f\x76\x94\x49\xb9\xe1\x91\x5e\x1e\x17\xe8\x22\x49\x50\xeb\xc8\x09\xea\xd7\x0b\xf5\xb6\xa7\x43\xb5\x4a\xdc\xba\xbd\x20\x33\x73\xe9\xc0\xc3\x43\xf0\x6e\x7f\xdc\xb9\xdc\xae\x9a\xa6\x1b\xe1\xdf\x00\x00\x00\xff\xff\x1d\xda\x9c\x95\xd1\x06\x00\x00")

func sqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlTmpl,
		"sql.tmpl",
	)
}

func sqlTmpl() (*asset, error) {
	bytes, err := sqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql.tmpl", size: 1745, mode: os.FileMode(438), modTime: time.Unix(1580134440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdd\x8e\xdb\x36\x16\xbe\x9f\xa7\x38\x65\xb2\x2b\x19\x89\xa4\x4c\x9b\x2d\x16\x63\xcb\x37\x93\x02\xc5\x22\xfd\x01\x32\x8b\x2e\x90\x0d\x02\x5a\xa4\x6d\x66\x28\x52\x4b\x52\x9e\x99\x4e\xfd\xee\x0b\x92\xb2\x6c\x49\x94\xc7\x9e\xb6\xbb\xba\x92\xc8\x43\x1e\x9e\xbf\x8f\x1f\xa9\xd9\x57\x49\x02\xd7\x52\x18\x2a\x0c\x7c\x4f\x31\xa1\x0a\xe2\x9f\xf1\x8a\xc2\xda\x7d\x4c\x20\x49\xe6\x17\x33\x4d\x0b\xc3\xa4\x80\x82\x63\xad\x73\x54\xf8\x01\x89\x97\x41\xf3\x0b\x00\x80\x19\x61\x9b\x43\x01\xcc\x04\x55\xc9\x92\xd7\x8c\x34\x12\x7d\x29\x25\xef\xa0\x5c\x24\x5f\x1f\x74\x0f\x27\xe2\x89\x2e\x93\x6f\x7b\x22\x4e\x6c\x7d\x39\xbf\xc1\x0b\x4e\x67\xd9\xfa\xb2\x37\x43\x46\xd8\xe6\x40\xe7\xfe\xd3\xbf\x3a\xab\xb3\xb4\xb7\x4a\x6f\x6a\xd6\xd8\x3a\xbf\xb8\x70\x62\x3f\x60\x26\xa0\x31\xf8\x98\x33\x76\x5e\x70\x63\x24\xc1\xdc\x09\xf7\xed\x29\x5d\xcf\x12\x13\x8a\x80\x91\x1c\x15\x8a\x62\x43\x13\xd7\x8c\xc0\xe0\x05\x13\x84\xde\xe7\x28\xb9\x44\xa0\x24\xa7\x39\x22\x0c\x73\xb9\x42\x80\x15\xc3\x09\xc7\x0b\xca\x39\x25\x8b\x87\x1c\x95\x0f\x4e\xcd\x7b\xdb\xd4\x74\xaf\x19\x21\x54\xe4\xc8\xa8\x9a\x8e\xf8\xdc\x69\x4a\x9a\x49\xc7\xfd\xee\xc5\xba\xa6\x1d\x97\xed\xe4\xc2\x30\x56\x6f\xbb\xd2\x86\x19\xde\xb8\xa0\x63\xc7\xfc\xda\x39\x04\x7e\xa4\x77\xf0\x0e\x1b\x3c\xcb\xd6\x6f\x47\xa6\x5c\xd4\xc6\x48\x01\xe6\xa1\xa2\x39\xf2\x1f\xa8\x8d\x09\x97\x9a\x22\x20\xd8\xe0\x84\x30\x5d\xb2\x56\x73\xd0\x53\x7f\x35\xac\xa4\x7a\x3a\xcb\xfc\x34\xf3\x8b\xa1\xbd\xdd\x8c\x1a\x77\xc3\x42\x92\x87\x31\x27\x2c\xa5\x2a\x9d\xc9\x98\x90\xcf\x45\x49\x3e\xdb\x06\x04\x52\xe8\x7a\x51\x32\x93\x23\x45\x4d\xad\x04\xf8\x4f\x97\xdb\xce\x35\x71\x94\x19\xfb\x91\x3d\x3e\xa6\xce\x71\xdb\x6d\x34\x41\x81\x55\xfa\x95\xda\x59\x03\x4b\x3d\xd5\x82\xa5\x94\x66\x3c\x90\xc7\xbc\xbe\x30\x02\x16\x46\x24\x84\x2e\x71\xcd\x4d\xd8\xff\xf3\x6b\x1b\x9b\xbd\xab\x9f\xd6\xe2\xdd\x81\xc0\xda\xd5\xf7\x5d\x4f\x73\xa5\x58\x89\xd5\x03\x9a\x7f\xc0\x9b\x23\x3a\x02\xbe\xe8\x00\x43\x27\xfb\xdb\x3a\x0e\x8b\xed\xcb\xdc\x4f\x3a\x28\x79\x25\xef\x46\x6a\xd1\x82\xdb\xe5\x51\xf4\xc3\x8a\x3c\x51\x7c\x56\xe4\xa9\xda\xfb\xa6\x23\xec\x4b\x6f\xbe\xcf\xa5\x59\xb6\xfe\x66\x64\x68\x5f\x91\x91\x92\x6b\xa8\x6a\xce\x13\xc5\x56\xeb\x10\x32\xf4\x63\xd8\x8b\x90\xac\x0d\x67\x82\xb6\x91\xf2\x39\x62\xe4\x6a\x65\xc1\xae\x29\x51\xdf\x86\xd5\x8a\x9a\x1c\xbd\xe8\x60\xe4\x01\x40\x1c\xcf\xa1\x13\xd6\x40\xb0\x58\x51\xe5\x51\x88\x50\x4e\x0d\x4d\x5c\x9d\x25\xcc\xd0\xb2\xb7\xb2\x5d\xaa\x4b\x51\x70\x56\xdc\xe6\xc8\xca\xbc\x73\x83\xe2\x09\x9a\xfb\xb7\x27\xb2\x7a\xa4\x02\x47\x9a\x9b\x3d\x6a\x1f\xdf\x4e\x22\x8e\x86\xe8\x18\x00\x59\x59\x6b\x2c\xbd\xc7\x65\xc5\xe9\xe7\x3b\x85\xab\xca\x7a\xa0\x99\xc0\x5a\xec\x60\x47\xef\xba\x80\x98\x64\x21\xa5\xd1\x46\xe1\xea\x2d\x9a\x0f\x12\x3b\xb0\x59\x5f\x7e\x0d\xf6\xad\x24\x76\xdb\x6e\x0a\xe6\x34\xa9\x81\xec\xb8\x0a\x34\x9f\xb9\x58\x1d\xda\xd3\xda\xe1\x7b\x7c\x2c\x17\x52\x11\xaa\x28\x69\x3e\xd7\x72\x63\xad\xda\x19\xba\xdb\x65\x57\x8a\x85\x2a\x2d\xe8\x45\x63\xc3\x71\xaa\xac\x6a\x14\x74\x51\xe0\xa9\xe7\xf1\x51\xd9\xdc\x84\xb4\xb0\xf5\xb6\xdd\x9e\x3c\x70\x66\xd6\xb6\xb2\x6d\x51\x9b\xf5\x39\xfa\xa8\x20\x27\xaa\x99\x65\x46\x9d\x68\x7d\x76\x96\xab\xec\xc6\x73\xb2\x5b\x4f\x13\xfc\x5f\xfa\xf1\x4f\xf3\xe1\x69\x7e\x99\x79\x8e\xd0\x29\xa5\x3f\x18\x86\x2c\xb4\x0c\x40\x28\xb4\x97\xee\xc7\x38\xf1\x10\x11\x3f\x94\x93\x83\x4d\xf4\xa0\xd7\x1e\x12\x7a\xc4\xfc\x80\xbe\xef\x49\x79\xa1\x58\xd5\xb8\x69\x83\x15\x54\xb7\x1a\x72\x78\x7c\x4c\xab\x5b\xbd\xdd\x4e\xdb\xf6\x42\xf2\xcf\x1b\xcc\x6d\xe7\xc7\x4f\xd3\x43\xf1\xcf\x8c\xec\x5a\x5d\xf3\xcb\x78\x59\x0b\xcf\xf4\xe3\x09\x3c\xb6\xab\xb6\xe2\x1e\x60\x72\x78\x19\x47\x2f\x1a\xf0\x89\x26\xe9\xbb\x1d\xaa\xc4\x8f\x1d\x7f\xa0\x0a\xaf\x98\x58\xa1\x2b\xb0\x74\xf3\x75\xb7\x8f\x53\xb1\x32\xeb\xeb\xb5\xcd\x53\x74\x05\x4b\xcc\x75\x5f\x44\x53\xac\x8a\xb5\x9f\x21\xd4\xef\x10\x6e\x54\x01\x13\x4b\x19\xee\xc1\xb5\x91\xbf\x30\x62\xd6\x63\x7a\x0b\x25\x39\xff\x57\x78\x70\xa5\x64\x41\xb5\x1e\x55\xab\xa9\xda\x50\xf5\x81\x11\x3a\xa2\xfc\x0b\xbe\x47\x57\x80\x6c\x88\x14\x5d\xb2\xfb\xed\x76\xc0\x72\x33\x8b\xd3\xa8\x1d\xb7\x9d\x4c\x2f\x3a\x61\x68\xf6\xc5\xdc\xc7\xc3\x26\x52\x5d\x0a\x1d\x4f\x52\xdf\x11\x4f\xa6\xad\xf8\x52\x2a\x88\xed\x18\x06\x39\xbc\x99\x02\x83\xaf\xf2\xbc\x99\x20\xf5\x31\x98\x02\x7b\xf5\xea\x30\xd2\x07\x39\x03\x3b\xd9\x8f\xec\x53\xca\x84\xa0\xea\xfb\x9b\x1f\xde\x4f\x3b\xa2\xbb\xd4\x4a\xab\x5a\xaf\xe3\x42\xf2\x49\xb7\x9f\x2d\x21\xae\x6e\x75\xca\x44\xc1\x6b\x42\xb5\x13\xe9\xeb\xb3\x4f\x93\x8c\x7e\x1e\xd6\x9b\x65\x0b\x94\x6b\x1a\x18\x95\x65\xe0\x99\x12\x78\x5e\xca\x44\x55\x9b\x81\x94\x73\x81\xed\x81\x3c\x88\x0e\x51\xa8\x11\x7a\x44\xc3\x4d\x90\xac\x94\xac\x2b\x04\xda\x3c\x38\xea\x86\xd5\x8a\x89\x2b\xf8\x5b\x75\x3f\x45\xf3\x7f\x8b\x08\x5e\x9d\xa9\x40\x57\x58\x04\x34\x24\x95\xa2\x15\x15\xe4\x59\x93\xba\x89\x31\xac\x15\x5d\xe6\xe8\xc5\xd8\x49\x05\x08\xd3\x36\x83\x08\x9a\x47\xf0\xca\xc5\xfb\x39\x7a\x32\xfc\x2c\xbb\x33\x6b\xf8\xb3\x8d\xf3\xc1\xf4\x27\x25\x43\xef\x4d\x6b\xa3\x3d\x20\xb9\x33\x8c\x92\x1c\x81\xc0\x25\xcd\x51\x6b\x1d\x44\xcf\x8b\x91\x83\xe7\x68\x7a\x31\x3c\x7b\x5a\x28\x3c\x3c\x9b\x45\x93\xd4\x32\x48\x41\x62\xb7\xc2\x7e\x16\xef\x8b\x7a\x3f\x55\x17\x4d\xa5\x88\x23\xc7\xb5\xa3\xd7\x10\x19\x12\xbd\x86\x30\x1e\x83\xcf\xfd\x26\x84\x40\x09\x33\xb6\xd4\x3c\xa1\x07\xa6\x01\x17\x86\x6d\xe8\xa0\x14\xad\xb6\x01\xeb\x8f\x26\xe9\x1a\xeb\x6b\xeb\xc1\x38\xf2\x03\xa3\x60\x8d\xda\x6a\x93\x42\x4b\x4e\x53\x2e\x57\xf1\xcb\xd8\xac\x99\x9e\xa4\x15\x56\x54\x98\x78\xd2\x33\xd7\x5b\xd7\x15\x49\xfd\xd1\xa2\xd1\xa5\x29\xa7\x85\xa1\x24\x0a\x8c\xf4\xd7\x02\x3d\xff\x0d\x51\x8a\x72\xbe\x87\x42\xca\xb9\xd7\x37\x1d\x08\x5a\x50\x85\xdc\xc9\xa7\xf6\x3d\x0e\xc8\xb8\x6b\xa8\x9d\x90\xfb\x08\x49\xd9\xbd\x39\xf7\xb2\x76\x9f\x1e\x0a\x78\xe4\xf4\x02\x1e\x9d\xa7\x17\xfd\xc0\x35\x27\x41\xb8\xa5\x0f\x50\x60\x21\xa4\x81\x05\x85\xc2\x6d\x88\x24\x04\xa0\x0e\x1b\x9f\x04\x51\xef\xb4\x7e\xd6\x0d\x56\x68\xca\x0a\x72\x88\xda\xa3\x51\xf9\xd0\x64\x83\xcd\x23\x14\x02\xbc\x91\xba\x39\xa5\x4a\x3b\x0a\x5c\x13\xea\x54\xae\x66\xbf\xd2\x1c\x5d\x7e\xdb\x82\xea\x9d\xdd\x9d\xaf\xe0\xef\x6f\xfe\x82\xb2\x67\xe9\x1d\xc3\x54\x5f\x9a\xcf\xb2\x05\x0e\x0e\xd6\x1d\x83\x34\xde\x50\x74\xda\xcd\xd0\x7c\xc6\x5a\x98\xc2\xb0\xc4\x7e\xec\x7c\x96\xb1\x79\x7b\x86\x7e\x8e\xb9\xc7\xa0\xf4\x04\x50\x3b\x6c\xdd\x95\xeb\xda\x94\x3c\x36\x65\x15\x2c\x12\xb7\x8f\xb6\xa2\x4b\x26\x48\xec\xdd\x8c\xfa\x7b\xbf\x6d\x4c\x97\xb2\xa8\x2d\x3d\xd9\x60\x1e\xdb\xca\x9b\x8c\xe8\x94\xcb\xe5\x1e\xfb\xd0\x8b\xae\x87\x2d\x32\xd2\x18\xb9\x6e\x34\xec\xee\xc3\x64\x90\x01\x28\x79\xb7\x63\xc1\x1e\x2f\x94\xbc\x8b\x95\xbc\x9b\xb4\x80\x10\x1c\x46\x58\x61\xed\x7d\xdc\x0e\x31\xca\x76\x7d\x8c\x94\xbc\xd3\xd1\x27\xc8\x5b\x05\xe9\x92\x71\x43\xd5\x01\x95\xde\x60\xfe\x1a\x18\x09\x95\x2c\xb4\x65\x0b\x83\x32\x67\x24\x00\x8c\xdb\x40\x9b\x5f\x88\x3d\xef\xb9\x85\xb4\xa4\xec\xff\xb7\x90\xce\x3a\x3e\x16\x92\x7f\x1a\x13\xb6\xce\x77\xd2\x3e\x5d\x6c\x9a\x84\x42\xf1\x32\xb5\xe4\x39\x0e\xaf\xdb\xd6\xdf\x15\xa0\x9f\xff\x79\x83\x5e\x07\x05\x6a\xc5\x9f\xa0\xdd\x23\x03\xed\xea\xae\xe0\x1f\x1f\x7e\xfa\x31\xd5\xc6\x9e\x37\xd8\xf2\x21\xb6\x0b\x9f\x84\xe5\x75\x5d\xd8\x13\xc2\xd5\x41\x42\x2a\xaa\x6b\x6e\xc6\x5c\xbe\x53\x62\xf3\xc7\x09\x0e\xfd\xb4\x7b\xf6\x9b\x57\x53\x47\x21\xa1\x6d\x78\x5d\x54\x29\xa9\xce\x5b\x15\xe6\x54\x99\x46\x2e\x55\x54\x57\x52\x68\x7a\x43\xef\xfb\xb4\xa6\xd5\x7c\x52\x86\xd0\x0d\x15\x26\xd5\x46\x56\x3f\x2b\x59\xe1\x15\xb6\xcb\xe9\xef\xb3\xdb\xa3\x20\xb1\xe0\xb5\xb2\xfc\xe8\x45\x77\x5b\xf1\xf4\x09\xd9\xde\x2e\x44\x78\x70\x3a\x46\xa5\xa0\xd9\x68\xfd\xe2\x14\xe5\xd8\x50\x72\xe3\xee\x62\x21\xcf\x41\xd4\x9c\xc3\x6f\xbf\x41\xa0\x3b\x65\xc4\x1d\xaa\xa2\x0e\x20\x45\x63\x7e\xb5\xfc\xab\xb3\xdb\x46\x93\x54\xd1\x8a\xe3\x82\xfe\xc2\xcc\x7a\x2c\xb0\xdb\x71\xef\xb4\x1f\xed\x4b\x6b\xe6\xe0\x97\x4a\xad\xf8\xe1\xc2\xb2\x2c\x40\x60\xdb\xde\x5a\x59\x1a\x13\x1d\xd4\x8c\x25\xd2\xb5\xe2\xfb\xe5\x05\x6b\x72\x57\x8b\x3f\x7d\xe8\x17\xa3\x2b\xc2\x5a\xf1\x6e\xab\xaf\xb0\x00\x93\xd6\x54\x31\xcc\xd9\xaf\x34\xee\xd5\xda\x59\x35\xf6\x32\xee\x5d\xa6\x4f\xfc\x2f\x8c\x38\x5a\x33\x42\x43\xcc\xf3\x65\x8c\x9a\x9f\x21\x0b\x5c\xdc\x12\x25\x2b\x64\x83\x54\xca\x0d\xed\xe7\x69\x23\xee\xae\x9f\x77\x32\x0d\xb7\xf5\x33\xc8\x8a\x8a\x11\x1d\xcd\xa0\xc2\x0a\x57\x98\x10\x26\x56\xfe\xff\x42\xf4\x3a\x7a\x53\xdd\x87\x46\xbd\x97\x98\x34\xff\xad\x5d\x2c\x7b\x45\xd3\xf5\xd2\x19\x15\x7f\xbe\x8f\x4e\xc5\x86\x6d\x37\x4f\xdb\xaf\x66\xa3\x71\x17\x30\x3e\x7b\x7b\xb9\x7b\xf8\xa7\xe1\x60\xc5\xbf\xef\x0c\x73\xca\x2d\x56\xcf\x80\x06\x9a\x5b\xc2\xa0\xe3\x28\xdd\x1f\x5b\xc2\xcc\xc1\x2e\xd2\x76\x34\x57\x2c\x16\x41\xde\x84\xdd\x3e\x62\x88\x65\x5f\xc8\x5b\xdf\xe7\x54\x70\xf2\xd1\x68\x84\xb7\xfc\x11\x54\xe1\x64\x9a\x30\xc0\xf1\x1e\x63\x6a\xef\x1d\x77\x4f\xe8\xc6\x0a\x0e\x7c\x19\xbc\xae\xea\x4f\xec\xef\x90\xec\xa8\x8f\xec\xd3\x9f\xcd\x81\x46\x13\x7e\x17\x07\x8f\xa3\xc7\xb9\x47\x7f\xb7\x1b\xe3\x3a\x0d\xb6\xbe\xfb\xee\xfd\x77\x37\xdf\x05\x18\x4b\x18\x61\xe1\x4c\x1e\x73\x36\x87\x39\x8e\x4b\x10\x66\x25\x67\x32\x92\x73\xd8\xc8\x70\xbb\x6c\xdf\x43\x17\x89\xc7\xeb\xf0\x5a\x8a\x25\x53\x25\x0c\xeb\x71\xbb\x43\xae\x8b\x59\xb6\xbb\x8a\xf7\xf7\xf4\x2d\x9c\x68\x7f\x51\xcf\x99\xb8\x05\x45\x79\x8e\xdc\x19\x57\xaf\x29\x35\xa8\xb9\xa0\x3b\x4c\x0c\x6d\xb0\x61\x45\x86\x49\xc9\x04\x37\x34\xab\x78\xbd\x62\x42\xbb\x2b\x61\xb7\x34\x9d\x78\xf0\xc9\x0a\xad\x33\xff\x9a\xee\x7f\x55\xa6\x25\x13\x76\x43\x41\xed\xbf\x01\xd0\xaa\x38\x57\x45\xf6\xe5\x3f\x35\x55\x0f\xe9\xfe\xc7\xa8\x9b\xf7\x8b\xb6\x67\xd5\x9d\x9d\xbf\x63\xfe\x64\xa1\xdf\x66\x5f\x7c\x4b\x33\x7f\xcf\x84\xae\xaa\xff\x06\x00\x00\xff\xff\x34\xb9\xde\xe4\xaf\x25\x00\x00")

func tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_tableTmpl,
		"table.tmpl",
	)
}

func tableTmpl() (*asset, error) {
	bytes, err := tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "table.tmpl", size: 9647, mode: os.FileMode(438), modTime: time.Unix(1580135724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"add_cmd.tmpl":       add_cmdTmpl,
	"datatable.tmpl":     datatableTmpl,
	"exe_cmd.tmpl":       exe_cmdTmpl,
	"footer.tmpl":        footerTmpl,
	"index.html":         indexHtml,
	"navbar.tmpl":        navbarTmpl,
	"sidebar.tmpl":       sidebarTmpl,
	"sidebar_right.tmpl": sidebar_rightTmpl,
	"signin.html":        signinHtml,
	"sql.tmpl":           sqlTmpl,
	"table.tmpl":         tableTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"add_cmd.tmpl":       &bintree{add_cmdTmpl, map[string]*bintree{}},
	"datatable.tmpl":     &bintree{datatableTmpl, map[string]*bintree{}},
	"exe_cmd.tmpl":       &bintree{exe_cmdTmpl, map[string]*bintree{}},
	"footer.tmpl":        &bintree{footerTmpl, map[string]*bintree{}},
	"index.html":         &bintree{indexHtml, map[string]*bintree{}},
	"navbar.tmpl":        &bintree{navbarTmpl, map[string]*bintree{}},
	"sidebar.tmpl":       &bintree{sidebarTmpl, map[string]*bintree{}},
	"sidebar_right.tmpl": &bintree{sidebar_rightTmpl, map[string]*bintree{}},
	"signin.html":        &bintree{signinHtml, map[string]*bintree{}},
	"sql.tmpl":           &bintree{sqlTmpl, map[string]*bintree{}},
	"table.tmpl":         &bintree{tableTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
