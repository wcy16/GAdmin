// Package template Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../template/footer.tmpl
// ../template/header.tmpl
// ../template/index.html
// ../template/jquery.tmpl
// ../template/navbar.tmpl
// ../template/sidebar.tmpl
// ../template/sidebar_right.tmpl
// ../template/table.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _footerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x81\xbc\x83\x96\xbb\xe3\xfb\x70\x0d\x85\x6d\xa7\xf5\xd6\x17\xd0\x6a\x3b\x16\x38\xd2\x88\x95\x96\xbc\x7d\x49\xdd\x42\x7d\xfb\x2d\xfd\xdf\x87\xdc\x87\x31\x70\x42\x62\xf8\x11\xd1\xb8\x80\x31\xbe\xef\x5c\x6a\xe1\x52\xb0\xd6\xc3\x30\x23\xb1\x69\x5f\x83\xef\x3b\x00\x80\x47\xef\x2c\xa0\x39\xc2\x42\x53\xd6\x56\x7c\x8c\x02\x5d\x5f\xcd\x54\x04\xd5\xb4\x85\x60\x58\x38\x42\x30\x75\x36\xc4\x85\x38\xbe\x60\xfb\x3b\xf2\xa6\x99\x78\x82\x4d\x56\xb8\x21\xeb\x13\x66\x03\x5d\xdf\x9d\x5f\x31\xe1\x5a\x14\xb4\xb9\x4b\x4c\xef\xea\xaa\x8b\xf0\xe4\x4f\x18\x22\xfc\x6d\x70\xbb\x6c\xb0\xd6\x9d\xea\x10\xf2\x12\xd3\x61\xc8\xaa\xff\xf5\xd3\x5a\x0c\x33\x71\xd1\x38\x92\x0c\xfe\xb8\x87\xdf\xf3\xf7\x48\xe2\x2c\xfa\xd1\xd9\x27\xa8\xef\x9c\x6d\x87\xfb\x7b\x00\x00\x00\xff\xff\x1a\x17\xaf\xd0\x2a\x01\x00\x00")

func footerTmplBytes() ([]byte, error) {
	return bindataRead(
		_footerTmpl,
		"footer.tmpl",
	)
}

func footerTmpl() (*asset, error) {
	bytes, err := footerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.tmpl", size: 298, mode: os.FileMode(438), modTime: time.Unix(1578216260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcd\x6e\xdb\x30\x0c\x80\xef\x05\xfa\x0e\x9c\xae\x8d\xec\x0c\x0b\xb0\x21\x88\x32\x14\x18\x56\xec\x56\xa0\x7d\x01\x46\xa6\x63\x62\xfa\xf1\x44\x3a\x59\xdf\x7e\xb0\xdc\x05\xeb\xba\xd3\x7a\xf0\x81\x24\xf8\x7d\x24\xad\xdd\x40\xd8\xed\xaf\xaf\x00\x00\x76\x91\x14\xc1\x0f\x58\x84\xd4\x99\x49\x7b\xfb\xc9\xbc\xa8\x25\x8c\xe4\xcc\x89\xe9\x3c\xe6\xa2\x06\x7c\x4e\x4a\x49\x9d\x39\x73\xa7\x83\xeb\xe8\xc4\x9e\x6c\x0d\x56\xc0\x89\x95\x31\x58\xf1\x18\xc8\xbd\x7f\x49\x1a\x54\x47\x4b\x3f\x26\x3e\x39\xf3\xd3\x4e\x68\x7d\x8e\x23\x2a\x1f\x02\xfd\x81\x65\x72\xd4\x1d\x69\x6e\x7d\x6e\x56\xd6\x40\xfb\xbb\xdb\x2e\x72\xda\xb5\x4b\x74\x29\xbe\xb3\x16\xbe\xe6\xa4\x70\x7b\x26\xc9\x91\xe0\x9b\xcf\x49\xc0\xda\xdf\xea\xc0\xe9\x3b\x14\x0a\xce\x88\x3e\x05\x92\x81\x48\x0d\x0c\x85\xfa\x39\x83\xca\xbe\xc5\x99\x1c\x94\xda\x31\x4c\x47\x4e\xd2\xf6\x39\x29\x2e\x3c\xdb\x17\xa2\xd6\x8b\xb4\x18\x42\x13\x39\x35\x5e\xe4\xb2\xd7\x6c\x7f\x1c\x28\x12\x54\xf8\x7f\x6a\x3b\x16\x5d\x14\xcf\x99\x7f\x7a\xbe\xa0\xe2\x23\x1e\x02\xbd\x75\xbb\x0e\x15\xb5\x82\xec\x41\x36\x55\xdc\x5d\xd8\xcd\x21\x67\x15\x2d\x38\x6e\x5e\x4d\x70\x97\xf3\x31\x50\x3d\xf7\x16\x1e\xf2\x54\x3c\xc1\x03\x26\x81\xfb\x92\xff\x9e\x69\x19\x61\xfe\xe5\xb2\x6d\xeb\x41\xa5\x39\xd6\x7e\x1c\x59\x1a\x9f\xe3\x2c\xfe\xdc\x63\xe4\xf0\xe4\x16\xd8\xcd\x0c\xbb\xb9\x2f\x79\xfb\x61\xbd\x5e\x6d\x96\x8f\x57\x1f\xd7\x6b\xf3\x6a\xc7\xfd\xf5\xd5\xae\xad\x0f\xf9\x57\x00\x00\x00\xff\xff\x9a\x83\x18\x2d\xcf\x02\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 719, mode: os.FileMode(438), modTime: time.Unix(1578216331, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6f\xa3\x38\x14\xbe\x23\xf1\x1f\x5e\xd9\x1c\x12\xa9\x90\xed\xae\xba\x87\x6e\x92\x4b\x5b\xa9\x95\xba\xbb\xdd\x36\xd5\x68\x4e\x23\x07\xbf\x04\x37\xc6\x30\xb6\x49\x1b\x21\xfe\xfb\xc8\x06\x12\x20\x21\xed\x61\x34\x37\xf0\xfb\xde\x7b\x9f\xbf\xcf\xf8\x31\x39\xbb\xf9\xef\x7a\xfe\xf5\xf1\x16\x22\x1d\xf3\x99\xeb\x4c\xce\x7c\xdf\x75\xe6\x11\x53\xc0\x14\x10\x50\x9a\x48\x8d\x12\x34\xc6\x29\x27\x1a\x21\x25\x2b\x0c\xe0\x45\x21\x68\x03\x32\xaf\xa0\x93\x12\x07\xdb\x24\x93\x20\xf0\x0d\x52\x99\xbc\x62\xa8\x61\x29\x93\xd8\x75\x54\x28\x89\x0e\xa3\x00\xe6\xbb\x94\x15\x6a\x05\x92\x51\x48\x96\x40\x38\x07\xce\xc4\x5a\x01\x11\xd4\xa4\x6e\x18\x45\x05\x3a\x42\x10\x88\x14\x29\xc4\x44\xae\xb3\x14\x12\xc1\xb7\x81\xeb\xf8\xbe\x21\x6a\x08\x03\x27\x62\x35\xf5\x50\x78\x33\xd7\xc9\xf3\x1d\x49\x2f\x42\x42\x51\x06\x3a\x4e\xb9\x57\x14\xae\xe3\x3a\x93\x45\x42\xb7\x10\x72\xa2\xd4\xd4\x8b\x12\x4e\x7d\x2d\x89\x50\x4c\xb3\x44\x80\x62\x14\x17\x44\xfa\x31\x13\xcc\x94\x9a\x50\xb6\xa9\xb1\x6f\x92\xa4\x29\x4a\xb3\xec\x3a\x00\x00\xcd\x3e\x82\x6c\x16\xa4\xd5\xa7\x8b\xa8\x4a\x97\x10\x08\xaa\xd7\x3d\xd6\x08\x0e\xd7\x89\xd0\x28\x34\x7c\x29\x7b\x05\x76\x81\x30\x51\x89\x15\x56\x61\xbb\x71\x9b\xd4\xe0\x57\x05\xfd\x9a\x27\x30\x3a\xf5\x62\xc2\x84\x5f\x45\xbc\x2a\xe9\xa0\xdb\x9d\x15\x09\x86\x8f\xa6\x47\xa9\xd8\x68\xdf\xa3\xaf\x4f\x09\x6c\x16\x3d\x86\x24\x4c\xa0\xf4\x97\x3c\x63\xb4\x0b\xed\xc2\x65\xf2\x06\xf1\xc2\xff\xe3\x18\xee\xb0\x34\xf7\x55\xec\xff\xd5\x87\xb5\xf8\xe8\xa2\x86\xc7\xfe\xef\xa0\xf1\x5d\xfb\x94\xc8\xb5\x37\x7b\xae\x0e\xb3\xd9\xf0\x64\x1c\x5d\xf4\x35\x1c\x53\xb6\x99\x59\xa9\xc6\x41\x98\xf0\xb6\x26\x47\x51\x66\x0f\x07\xa8\x4e\x9d\x96\x28\x1d\x9d\x2d\xb2\x63\x53\x99\xb3\x97\xbc\x4c\xe9\x80\xfe\x21\x4c\x1c\x9e\x8f\x1e\xef\x7e\xae\x69\x7d\x1e\xe4\xb9\x24\x62\x85\x30\x60\x82\xe2\xfb\x39\x0c\x42\x22\x29\x5c\x4d\x21\x30\x0f\xca\x1c\xfd\xa3\xaa\x77\x6c\xe6\x2b\xff\xcf\x93\x36\x37\xf1\x44\x1e\x65\x7c\x0a\xdf\x73\x90\x8f\xa6\x46\x97\x8d\x13\xe5\xcd\xf2\xdc\xee\x29\x98\x33\xcd\xb1\x28\x26\xe3\xe8\xf2\xa3\xe6\x1d\x83\x3f\x45\xd0\xdc\x58\x5e\xcb\xf2\xde\xd4\xb4\x95\x68\x8e\xfc\x9e\x65\xf5\xb9\x1b\x9e\xe9\xa7\xaa\xed\x0c\x34\x97\x32\xa3\xe7\xe5\x83\x71\xb0\x2c\xf8\xc0\xc4\xba\xcf\xc5\x03\x66\x04\x22\x89\xcb\xa9\x97\xe7\xb6\x4a\x70\x27\x71\x59\x14\x5e\x8b\xaf\x09\x58\xbe\x16\xf1\x2f\x89\xad\xa8\xe4\x13\xce\xe4\x39\x0a\xfa\x11\x97\x8f\xc4\x3f\x15\x3f\x15\xeb\x6d\xde\x97\xf4\x2b\x2e\x8b\xc6\x90\x68\xe0\x3a\x17\x4a\x35\x2b\x9a\x37\xca\x91\x99\xf5\x4d\xb2\x55\xa4\x4f\x0d\xb7\x65\x92\xe8\xe6\x98\xad\x5b\xda\x76\xc1\xb8\xd3\xc6\xae\x3e\xdd\xfe\xff\x72\xff\x74\x7b\x03\xcf\xd7\x4f\xf7\x8f\xf3\xe7\x3a\xd8\x2c\xfb\xfa\x3d\x43\xb9\x6d\x94\x55\xa1\x64\xa9\xae\xf6\xb2\xcc\x44\x68\xa7\xf6\x43\x42\xe8\x9c\x2c\x38\x0e\x33\xc9\x47\x90\xef\x25\x19\x04\xe4\x95\xbc\x0f\xf3\x4c\xf2\xab\x4c\xf2\x73\x95\x85\x21\x2a\x75\x55\xa7\x0e\x25\xaa\x8c\xeb\x51\x7e\xe8\xd1\x60\xe8\xfd\xd6\x9a\x9e\xa3\xc0\xfc\x69\xd4\x19\x7f\xb7\x33\x8a\xa2\x5e\xb1\xbb\xdf\xf1\x9c\x8c\xcd\xc7\x6b\x1f\xaa\x1f\xab\x1f\x01\x00\x00\xff\xff\x8e\x3d\x62\xe7\x6a\x09\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2410, mode: os.FileMode(438), modTime: time.Unix(1578989024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jqueryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\xd4\xd5\x55\xc8\x0a\x2c\x4d\x2d\xaa\x54\xd0\xd5\xb5\xe3\xe5\xb2\x29\x4e\x2e\xca\x2c\x28\x51\x28\x2e\x4a\xb6\x55\x2a\x2e\x49\x2c\xc9\x4c\xd6\x4f\x4c\xc9\xcd\xcc\xcb\x29\x49\xd5\x2f\xc8\x29\x4d\xcf\xcc\x2b\xd6\xcf\x2a\x04\x69\x80\x52\x7a\xb9\x99\x79\x7a\x59\xc5\x4a\x76\x36\xfa\x10\xbd\x20\x53\x40\xc6\x3a\xe5\xe7\x97\x14\x97\x14\x25\x16\x28\x98\x90\x60\x76\x12\x4c\x97\x7e\x16\x12\x47\x2f\xa9\x34\x2f\x25\x27\x15\xa7\x5d\x8e\x20\x63\x7c\x42\x5c\x15\x1c\x0b\x0a\x88\xb0\x2c\x25\xb3\xb8\x04\x64\x3e\x4c\x00\xd3\x5c\x40\x00\x00\x00\xff\xff\xeb\x75\xef\x95\x19\x01\x00\x00")

func jqueryTmplBytes() ([]byte, error) {
	return bindataRead(
		_jqueryTmpl,
		"jquery.tmpl",
	)
}

func jqueryTmpl() (*asset, error) {
	bytes, err := jqueryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jquery.tmpl", size: 281, mode: os.FileMode(438), modTime: time.Unix(1578365391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _navbarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xcf\x4e\xc3\x30\x0c\xc6\xef\x93\xf6\x0e\x26\x3b\x9b\xbe\x40\x1a\x89\x1b\x07\xc4\x81\x37\x70\x17\x77\x8d\x96\x3a\x53\xfe\x74\x3c\x3e\x6a\xbb\x4e\x9d\x18\x20\x24\xe8\x25\xb2\xfc\xd9\x3f\xcb\x9f\xab\x1f\x10\xe1\x95\x86\x86\x22\x20\x9a\xed\x46\x0b\x0d\xb0\xf7\x94\x52\xad\x7a\x72\x82\x1d\x93\xe5\x08\x32\x6b\xe6\x07\xf9\xfd\x44\x62\x97\xe8\xdc\xb9\xcc\x4b\xe0\xdd\xa1\xcb\xca\x6c\x37\x00\x00\x53\xfb\x17\x6e\xf3\x52\xef\x9d\x1c\xd3\x4c\x9a\xf2\xc5\x2f\xb0\x4b\xb9\xd0\xb0\x14\x4f\x02\xef\x56\x02\x74\x99\xfb\x75\x7a\x92\xd0\x5a\x31\x02\x14\x58\xca\x84\x67\x67\x0f\x9c\x6b\x75\x2a\xa9\xeb\x59\x8a\x82\x2e\x72\x5b\xab\x9d\x32\xfa\xda\xb5\xa5\x04\x2d\x61\x43\x31\x29\xa3\x2b\x67\x74\x45\x6b\x7e\xe5\xdd\xf7\xe3\x80\x45\x09\xc2\x60\x31\xf5\xe8\xc4\x3b\x61\x6c\x7c\xd8\x1f\xef\xcc\x39\xf3\x2b\xf5\x69\x60\xf3\x1c\x7a\xfe\x7f\xf2\xee\x0e\xf9\xa9\x09\x25\x7f\x89\xd6\x55\xf1\x66\xbb\x59\xb9\xf9\x36\xfa\xfb\x1b\x3b\xa1\xf7\x48\x25\x87\xbf\xb6\x75\x1f\x24\xc7\xe0\x31\x39\xcb\x0d\xc5\x4b\x36\x79\x67\xb9\x56\x39\x16\xbe\xf1\xfb\xb6\xf9\xfa\xbb\x3d\x84\xdc\xa1\xa7\x78\xe0\x1f\x8e\xe1\xb2\x17\x5d\x09\x0d\xe3\x3b\x6e\xa6\x7a\x94\xeb\x8f\xf4\x11\x00\x00\xff\xff\x29\xbf\x2b\x7a\x58\x03\x00\x00")

func navbarTmplBytes() ([]byte, error) {
	return bindataRead(
		_navbarTmpl,
		"navbar.tmpl",
	)
}

func navbarTmpl() (*asset, error) {
	bytes, err := navbarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "navbar.tmpl", size: 856, mode: os.FileMode(438), modTime: time.Unix(1578984724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x8b\xe4\x36\x10\xbd\x0f\xcc\x7f\xa8\x38\x03\xbb\x0b\x51\x1b\x32\x39\x85\x6e\xc3\x66\x0f\xb9\xcc\x1e\x92\x0d\xe4\x5c\xb6\xca\xb6\x68\xa9\x64\x64\xf5\xc7\x60\xfc\xdf\x83\xe4\x76\x8f\xdd\x9f\x0b\x0b\x61\x7c\x50\xb7\x51\xbd\xaa\x57\xaf\xaa\x4c\x2d\x7f\x12\x02\xbe\xa2\x62\xf8\xa6\x24\xe5\xe8\xe0\x8b\x65\x8f\x8a\xc9\x81\x10\xd9\xe3\xc3\x12\x5b\x25\x09\x0a\x8d\x6d\xbb\x4a\x0c\x2a\x16\xed\xc1\xf2\xf0\x2b\x24\xba\xb5\x68\x9c\x32\xe8\x5e\x81\x34\x6d\xd1\x2b\xcb\xe2\xb7\x24\x7b\x7c\x00\x00\x88\x31\xfe\x70\xc8\x12\x5e\x6c\x65\x07\xbf\xf1\x02\xa1\x76\x54\xae\x12\xc5\x92\xf6\xcf\x8b\xda\x1b\x9d\x8c\xa1\xf2\x00\x10\x5a\xf1\x7a\xf4\x13\x21\x6d\x83\x3c\x37\xf1\xb4\xf7\x50\x5a\xf6\x62\x47\xaa\xaa\xbd\xd0\xe1\x4c\xb2\x3f\x3f\x4b\xa3\x78\x99\x06\xc4\x18\x30\xc5\xec\xf1\x61\xc2\x6a\x4c\xfa\x8d\x92\x54\xdb\xd1\xfd\x21\xbf\x59\xf8\x29\x68\xd3\x92\x83\x06\x99\x34\x7c\xb4\x4d\xc8\x19\xf5\xa7\x37\x57\xa7\xee\x82\xb9\x18\xcc\x8d\x17\xcf\xd0\xe4\xe2\x19\x4c\x38\xa4\x28\x35\xed\xa7\x71\x4e\xb1\x8a\x4b\x7b\x7a\x3f\x53\xf0\xe7\xa3\x6e\x52\xe4\xda\x16\xeb\x24\xeb\xba\x45\x08\xc9\x68\xa8\xef\x87\xcc\x67\xd0\x54\xaa\xed\x94\xea\xe1\xfd\x4a\xb2\x5f\x89\x37\x27\xb9\x31\x1e\xf9\x19\x2f\x7e\x3d\xe3\xbf\xd1\xe3\x75\xb0\x64\xdc\x8a\x46\x69\xdd\xc6\x7f\x63\x0f\x85\xc4\x45\x61\xf5\xc6\x70\x02\x12\x3d\x8a\x9d\x92\x15\xf9\x55\xe2\x1d\xd1\x56\xd1\x2e\x01\x67\x35\xad\x12\x43\xbc\x39\x98\x60\x51\x58\x27\x95\xe5\x55\x52\xa2\x6e\xe9\xa2\x32\x81\xfc\x67\x29\x41\x15\x96\x5b\xf0\x16\x7c\x4d\x10\xda\xa9\x85\x4d\xab\xb8\x8a\xef\x8b\xc0\x25\x58\x0c\x4c\xcf\xdd\xc4\x67\xa7\x7c\x3d\x74\x18\xee\xa8\xb5\x86\xc0\x3a\x40\x7e\x05\xeb\x6b\x72\x31\x42\xbc\x06\xad\x72\x17\x86\x60\xa6\xd3\x91\x91\x56\x13\x3d\x84\xf2\x64\xa0\xc6\x56\x1c\x13\xbd\x80\xb9\x52\xe3\x80\x3f\x9d\x8c\x33\xd8\x3c\x5a\xe4\x88\x2d\x40\x89\x22\x88\x98\x63\xd0\x6d\x99\xaa\x5b\x2e\x9a\x1b\x97\xe1\xf9\x07\x73\x4d\xd7\x54\x3b\xe3\xe1\xc2\x5c\x46\x12\x25\x0a\xe4\x4a\x93\xd0\x54\xfa\xbb\x2c\xd2\x6b\x34\xce\x9b\xfa\x78\x73\xde\x7b\xf7\x64\x0e\x4f\xd7\xc1\x53\x03\xbf\xaf\x60\xd1\x38\x2a\xd5\x1e\xfa\xfe\x96\xb1\x43\xae\x08\x9e\xe2\xd7\xeb\x17\x78\x22\x4d\x86\xd8\x47\xbc\x8f\xca\xdc\xc4\xc3\xe5\x9e\xb8\xc5\xef\x08\x9b\xb4\x84\xe5\x42\xab\x62\xbd\x4a\x5e\x2c\xca\x58\x90\x8f\x1f\x86\x3c\xfa\x3e\xed\xba\x91\x55\xdf\x7f\xf8\x74\xd6\x3f\xa0\x2d\x4a\x11\xb9\x26\xa0\xe4\x2a\x99\xda\x7f\x0f\x11\x98\x15\xb8\x0c\x03\x8d\xa2\x50\xae\xd0\x04\x63\xdb\xdd\xab\xef\xcc\x57\x93\x4d\x29\x5c\x2f\xfd\x0c\x74\xb5\x0d\xde\x2c\xf4\x2d\x06\x5d\x47\x2c\xaf\x95\x6a\x99\x6e\xf4\xa5\x69\xbe\xec\xf2\x7d\x0c\x79\x89\xc2\x63\x51\x5b\x43\x9e\x9c\x40\x7d\x7f\xc6\xee\xe9\xfc\xc5\x1a\x83\x2c\xdf\xdb\xac\x7f\x7f\x15\xfe\x37\xe1\xd7\xf4\x9a\x5b\x74\xf2\x87\x25\xff\x1b\x77\xf0\xed\xaf\x97\x3b\x8a\x4f\xf7\xa1\x41\xf4\x1c\x65\x45\xc3\x29\x64\xf8\x42\xb9\x24\xfb\x17\x1d\x2b\xae\x66\xcb\xd0\x45\x77\x3f\xae\xff\xc9\xbc\x2c\x53\xc6\xed\xe9\x06\x95\x2e\xc6\xdd\xd1\xcc\xd6\x8a\xe9\x4e\x32\x37\x3c\x2c\xa3\x69\xdc\x46\xb3\xff\x02\x00\x00\xff\xff\x82\x76\xc1\x08\xb6\x0a\x00\x00")

func sidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarTmpl,
		"sidebar.tmpl",
	)
}

func sidebarTmpl() (*asset, error) {
	bytes, err := sidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar.tmpl", size: 2742, mode: os.FileMode(438), modTime: time.Unix(1578985312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebar_rightTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x4d\x0e\x83\x20\x10\x85\xf7\x26\xde\x61\xea\x7e\xca\xa2\x71\x47\xd9\xf4\x08\xf6\x02\x54\x26\x85\x94\x08\x61\x88\xe7\x6f\x40\x49\xd4\xdd\xfc\xbc\xf9\xde\x3c\x79\x43\x84\x57\x58\x72\x0a\x1e\x26\x67\xe8\xa3\x13\x20\xaa\xbe\x93\x9a\x9d\x21\x98\xbd\x66\x7e\x0e\xf3\x26\x41\xde\x25\x97\x1e\x8d\x4e\xbf\x41\xf5\x1d\x00\xc0\x89\x79\x3c\xa0\x25\xc3\x37\x10\x83\xa5\x44\x9b\x4b\xd5\x1b\xb7\x36\x9f\x88\x8f\x86\xa9\x2b\x3b\xaa\xb7\xcb\x9e\xa4\xb0\xe3\x71\x1e\xd5\x74\x06\x4b\x11\x1b\x4e\x18\xb7\x96\x00\xa2\x26\x28\x55\x79\x48\xdc\xaf\x19\x10\xd5\x3f\x00\x00\xff\xff\x21\x32\xef\x13\xff\x00\x00\x00")

func sidebar_rightTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebar_rightTmpl,
		"sidebar_right.tmpl",
	)
}

func sidebar_rightTmpl() (*asset, error) {
	bytes, err := sidebar_rightTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar_right.tmpl", size: 255, mode: os.FileMode(438), modTime: time.Unix(1578194347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xdb\x38\x10\xbd\x1b\xf0\x7f\xe0\x72\x0d\xc4\xc6\x46\x26\x9c\x04\x7b\x70\x65\x5d\xd2\x43\x2f\x05\x0a\xb4\x40\x7b\x2b\x68\x71\x2c\xd1\xa0\x49\x95\xa4\x9d\x04\x82\xff\x7b\x41\x4a\xb2\x64\x7d\x24\xca\xa1\x40\x7d\x30\x48\xf1\x71\xde\xcc\x9b\xe1\x4c\xf8\x4f\x10\xa0\x47\x25\x2d\x48\x8b\x3e\x01\x65\xa0\xd1\xfc\x0b\x4d\x00\xa5\x7e\xb3\x40\x41\x10\x4d\x27\xa1\x81\xd8\x72\x25\x51\x2c\xa8\x31\x1b\x1c\x17\x37\x82\x02\x84\xa3\xe9\x04\x21\x84\x42\xc6\x4f\x4d\x04\xe5\x12\x74\xb0\x13\x47\xce\x2a\x48\x1b\xa6\xd5\x13\x3a\x6c\x83\xbb\xe6\x79\xd7\x94\x08\xcc\x21\xf8\xbf\x8d\xf1\xb8\x74\x15\x7d\xa3\x5b\x01\x21\x49\x57\x6d\x1b\x84\xf1\x53\x93\xb7\xb1\x2f\xd6\x3e\x7a\xb2\x6c\xf9\x5a\x86\x4c\xca\x98\xa3\xe9\x64\x3a\xf1\xc8\xcf\x94\x4b\x54\x86\xfe\xaa\x2e\x7d\x82\x68\xf5\x34\x24\x82\x0b\x70\xf5\xba\x04\x54\xb3\xde\xf0\x5b\x98\x56\x42\xba\x6a\xdd\x5f\xa1\x2d\xb7\x02\x70\x94\xe7\x4b\xbf\x3a\x9f\x43\x92\xde\xf7\xd1\xb4\x94\xbc\x7c\x2f\xf5\xab\x99\x0b\x59\xde\x74\x73\xab\xd8\xcb\xa0\x93\x0e\xcc\xd9\x06\xc3\x33\x3d\x64\x02\x7e\x3e\x69\x9a\x65\xa0\x71\x65\x81\x51\x4b\x7d\xce\x4d\x75\x84\x98\x0d\xb6\x4a\x59\x63\x35\xcd\x1e\x70\xd4\xd1\xbd\xa7\x9c\x56\x77\xc8\xad\x0e\xcc\x15\x56\x59\x0e\xe3\x50\x1d\xec\x30\x05\x8e\x42\xeb\x3c\x6d\xc6\x73\x89\xa3\x38\xf1\xff\xc1\x56\x69\x06\x1a\x58\xb9\x4d\xd5\xc9\x45\x55\x05\x8a\x91\x56\x02\x36\x38\xd1\xbc\xb7\x0c\x7a\x65\xb4\x2e\x23\xa3\xc1\xba\xa4\x68\x95\xe9\x5b\xbf\x3c\xd7\x54\x26\x80\x66\x5c\x32\x78\xbe\x45\x33\x10\x70\x70\xcf\x63\xbd\x41\xcb\x58\x09\x83\xce\xe7\xf1\xd6\x42\x9b\x46\x79\x5e\xd9\x70\xe5\x68\xd3\x77\x39\x03\x92\x8d\xe5\x0b\x89\xd5\x63\xd5\x21\xef\xd3\x72\xa7\x94\x1d\x2f\xfc\x48\xe4\x5f\xa3\xf4\x1f\x54\x79\xa4\x70\x21\xf1\xaf\xe4\xea\x3d\x0e\xf4\x92\xa1\xc6\x35\xa2\xa1\xb9\x1e\xd5\x6d\x67\x7d\x37\x1b\xb7\x8a\x0b\xfd\x33\xa7\x09\x55\xa2\x36\x7d\x35\x97\x8a\x73\x37\x16\x3b\x53\xa8\x31\xad\x1a\x03\x28\xd6\x3c\xab\x44\x9b\xcd\x77\x47\x59\x0c\xa4\xf9\x02\xe5\x35\xed\x6c\x7e\xf3\x6f\xd9\x7e\x6e\x16\xcb\x8f\x55\x5f\x99\xe7\xd7\x81\xe0\x8c\x26\x5c\x26\x78\x8d\xac\x3e\xc2\x6d\xeb\x50\x80\x4c\x6c\xfa\x98\xba\x32\xc4\x6b\xb4\xa3\xc2\x74\x30\x06\xa8\x8e\xd3\xc2\x46\x2f\xc0\xf7\xb9\x61\x0e\x2e\x77\x6a\xe0\x88\x1e\xad\xfa\xce\x99\x4d\x07\xb9\x63\xad\x84\xf8\x31\x70\x3d\xd3\x2a\x06\x63\x86\xa9\x0d\xe8\x13\xe8\xaf\x9c\xc1\x90\x03\x7b\xfa\x8c\xd7\x08\x17\xd5\x47\x30\xfa\x0f\xe1\x7a\x74\xfa\x2d\x71\x2d\x1b\xd7\xf7\xce\x8b\x0f\xc5\xc6\x2f\x42\x72\xc9\x56\x99\xcd\x4b\x26\xcc\x55\x3a\x91\xd1\xf1\x06\x1b\x4b\x2d\x8f\x09\x65\x07\x2e\x85\x05\x92\x89\x63\xc2\xa5\xf1\x1c\xde\x05\x43\xf6\xbf\x8e\xa0\x5f\x96\xf5\x44\x5c\xee\x8d\x9b\x53\x17\x9e\x77\x1a\x0c\xb6\xe6\x81\xec\x8b\x2f\xa5\xc1\x7a\xae\xb6\x6d\xff\x0e\x00\x00\xff\xff\x48\x46\x15\x42\x3c\x0a\x00\x00")

func tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_tableTmpl,
		"table.tmpl",
	)
}

func tableTmpl() (*asset, error) {
	bytes, err := tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "table.tmpl", size: 2620, mode: os.FileMode(438), modTime: time.Unix(1578984867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"footer.tmpl":        footerTmpl,
	"header.tmpl":        headerTmpl,
	"index.html":         indexHtml,
	"jquery.tmpl":        jqueryTmpl,
	"navbar.tmpl":        navbarTmpl,
	"sidebar.tmpl":       sidebarTmpl,
	"sidebar_right.tmpl": sidebar_rightTmpl,
	"table.tmpl":         tableTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"footer.tmpl":        &bintree{footerTmpl, map[string]*bintree{}},
	"header.tmpl":        &bintree{headerTmpl, map[string]*bintree{}},
	"index.html":         &bintree{indexHtml, map[string]*bintree{}},
	"jquery.tmpl":        &bintree{jqueryTmpl, map[string]*bintree{}},
	"navbar.tmpl":        &bintree{navbarTmpl, map[string]*bintree{}},
	"sidebar.tmpl":       &bintree{sidebarTmpl, map[string]*bintree{}},
	"sidebar_right.tmpl": &bintree{sidebar_rightTmpl, map[string]*bintree{}},
	"table.tmpl":         &bintree{tableTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
