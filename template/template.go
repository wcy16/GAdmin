// Package template Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../template/add_cmd.tmpl
// ../template/datatable.tmpl
// ../template/exe_cmd.tmpl
// ../template/footer.tmpl
// ../template/header.tmpl
// ../template/index.html
// ../template/jquery.tmpl
// ../template/navbar.tmpl
// ../template/sidebar.tmpl
// ../template/sidebar_right.tmpl
// ../template/signin.html
// ../template/sql.tmpl
// ../template/table.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _add_cmdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x46\x13\xbe\xbf\xc0\xfb\x1f\xa6\xeb\x14\x92\xa0\x92\xb4\x0b\xf8\x22\x89\x02\x0c\xb7\x97\x22\x70\x92\xda\x37\xcb\x08\x56\xdc\xa1\xb5\xcd\x72\x97\xde\x5d\x2a\x56\x03\xff\xf7\x62\xf9\x25\x8a\xa2\x24\xcb\x4e\x80\xf4\x83\x87\x44\xe4\xcc\x3e\xf3\xf5\xcc\x70\xe8\x09\xe3\x4b\x30\x76\x25\x30\x24\x29\x65\x8c\xcb\xfb\x11\x9c\xfd\x48\xa6\xff\xff\x1f\x00\x40\x2e\x8e\x04\x35\x26\x24\x91\x12\x5e\xc2\xbc\xb3\x9f\x2b\xe1\x96\x02\xd5\xac\x29\xeb\x92\x7b\x0b\xa4\x0c\x75\x5b\x2d\x57\x5d\x9c\x57\x9a\x89\x77\x4a\xa6\x17\x8c\xc1\xa5\x4a\x12\x2a\xd9\x24\x58\x9c\xb7\x81\x03\xc6\x97\x87\x8c\xcd\x15\x5b\x75\x9a\x8a\x95\x4e\x80\xb3\x90\x50\xc6\x3e\x46\x09\xfb\xe8\x1e\x10\x50\xd2\x64\xf3\x84\xdb\x90\x68\xb4\x99\x96\x50\xdc\x5e\x30\x76\x99\xb0\xfe\xa0\x0b\xaa\x6d\x97\xcb\x34\xb3\xde\xbd\x56\x59\x4a\xaa\xc4\x26\x54\xdf\x73\x39\x82\xf3\xf4\x71\xbc\x0b\x23\xc7\x31\x29\x95\x1d\x40\x5e\xaa\x31\x45\xb9\x95\xdc\xad\xf3\x14\x16\x1a\xe3\x90\x9c\x90\x0a\x65\x6e\x25\xcc\xad\xf4\x18\xc6\x34\x13\x16\x18\x37\x74\x2e\xf0\x20\x94\xbb\xca\xe4\xc3\x15\x4d\xf0\x80\xe1\x80\xee\x0b\x2b\x70\x71\xed\x53\xc8\x63\x05\xbb\x4a\x31\x24\x16\x1f\x6d\xed\xbe\x2b\x8b\x17\x29\x69\xb5\x12\x04\x24\x4d\x30\x24\xee\x5f\x02\x1a\x1f\x32\xae\x91\xed\x2a\x49\x07\x3d\x6a\xd9\x3f\xb3\x5c\xbf\xa0\x89\x34\x4f\x2d\x57\xf2\x3b\xaa\x16\x5b\x7b\xf5\x5f\xd1\xb6\xaf\xeb\x0f\x6f\xbf\xa3\x62\x99\x07\xf1\xec\x22\xfd\xab\xca\x74\xb3\x4a\xbf\xf1\x08\x34\x28\x30\xb2\xfb\x8a\xf3\x90\xa1\x5e\x1d\x2c\x4f\x0d\xa8\xf2\x9e\x83\x25\x15\x19\x86\xe4\x94\x4c\x7f\x7d\xc4\x28\xb3\x38\x09\x0a\xc9\x71\xe7\xcf\xc8\xf4\x83\xb3\xff\x8c\xd3\x93\xa0\x88\xe5\xef\xcd\x9f\x79\x66\xad\x92\x5f\x83\x3b\xef\xa9\xa6\x09\x5a\xd4\xe6\x10\x83\x0a\x9b\xaf\xa3\xd1\x8e\xb0\x69\xfa\x75\xba\xc6\xed\x48\x91\xe0\xd1\xa7\x7c\x75\xca\x43\xdb\xbd\x17\x35\xaf\xe1\x37\x6b\x9f\x67\x10\xaa\xda\xf4\x52\xe7\xaf\xd9\xb9\xc6\xed\x07\x2a\x19\x51\x8c\xd2\x62\x31\xdc\x99\xa5\xe9\x75\x2e\x6f\x94\xb4\x63\x09\x0d\x5c\x97\xbf\x64\xad\x8d\x95\xb2\xa8\x49\x1e\x96\x5b\x5e\x35\x9a\xdc\xe8\xb6\x8d\xdf\x73\x89\xd9\x6f\xa3\x79\x5f\xfd\xae\xff\x2f\xde\xde\xa5\x34\xce\x64\x94\x4f\x85\x75\xed\xe1\xcb\x1a\x68\x49\x35\xe4\x29\x86\x10\x7a\xc7\x75\xf2\x4c\xf6\xda\x14\xe9\x75\x55\xa1\xf6\xf9\xa8\xf7\x5a\xa4\x92\x04\xa5\x35\x8d\xe9\x79\xb4\xc1\x43\x9d\x75\x2c\x20\x1c\x9c\x32\x8d\x5e\x63\x28\x8a\x7c\xdb\x05\x37\x83\x97\x19\x73\x97\xf7\x22\x2f\x2b\x16\x1f\x9d\xb3\xa2\x6d\x8f\x39\x56\xf0\xae\x37\x5e\xab\xbf\xe9\x93\x93\x46\xef\x0e\xfc\x22\xe1\xfd\xfc\x7e\x50\x2a\x3e\x55\x0d\x56\x33\xb4\xce\xd8\xdc\xca\x0d\x92\xce\xad\xf4\x53\xaa\x51\xda\x2b\xc5\xb0\xf9\x53\x63\xa2\x96\xd8\xdf\x8d\xb9\xf9\x35\xd8\x66\x3e\xd5\x1a\xc2\xda\xdd\xfa\xa3\x72\xe0\x1b\xd4\x9c\x0a\xfe\x27\x5e\x68\x4d\x57\x35\x7e\x75\x8e\x51\x4b\x21\x84\x2f\x4f\x8d\xe7\xee\xd9\xed\x9a\xb6\x77\x10\xc2\xed\x5d\x43\x1e\x2b\x0d\x7d\x77\x98\x43\x08\xa7\x63\xe0\x30\x71\xf6\x7d\x81\xf2\xde\x2e\xc6\xc0\x87\xc3\x0d\xff\x2a\x5b\x31\x47\xc1\x20\x74\xba\xb7\xdc\x01\x6e\xaa\xf0\x18\xfa\xb9\x8a\xef\xfa\x06\xc2\x30\x84\xb5\x13\x5b\x80\x5d\x8e\xfa\x69\x66\x16\x25\x46\xbe\x3a\x0c\x36\xcf\x3c\x01\x0a\x83\x3b\x91\xd6\xc6\x5d\xc8\x0d\x98\x71\x0b\xa6\xcb\xf3\xc2\x97\x62\x4d\xba\x2b\x9c\x3f\xdd\xe7\x75\xad\x09\x31\x15\x66\xcb\xc4\x7e\x4f\x1b\xa7\xad\xee\xf2\xaf\xd3\xd5\x37\x3e\xfd\x83\x3e\xf6\x5b\xa0\x99\x16\x23\x12\x44\x09\x23\x3f\x6d\x0a\xdc\x78\x1b\x91\xf7\xef\xae\x6f\xda\x12\xe7\xc3\xe8\xb7\xeb\x77\x57\xbe\xb1\x9a\xcb\x7b\x1e\xaf\xf2\xf8\x07\x2d\x3d\x93\x45\x11\x1a\x33\xaa\x38\xdc\x2f\xde\x15\x83\x8e\xb0\x3e\x73\xc9\xd4\x67\x9f\x0a\xd4\xb6\x4f\xca\x83\x3f\x90\xc1\x78\x5b\xd5\x51\xa9\x60\x48\x99\x8c\xfc\x9b\xfc\x6e\x87\xa6\x85\x10\xc8\x44\xf0\x72\xcc\xcd\x88\xa4\x4b\x8f\x5b\x4c\x66\x6e\x90\x91\x5d\xab\x01\xe9\x7a\xd8\xbc\xaa\x6d\x65\x46\x4e\x66\xeb\x59\x39\x23\x6f\x15\x65\x97\x4a\x5a\x94\xb6\xdf\x8b\x12\x16\x10\x18\x42\x11\x37\x0c\x81\xf4\x06\x33\xb2\xe1\x8a\xe0\xf2\x13\x08\x45\x99\x67\xdd\x52\xf7\x4a\xaf\x72\xcf\xd6\xb1\xc6\x79\xaa\x96\x1e\x8f\x94\x9c\x91\xe9\x24\xe0\xaf\x47\x4f\xa7\x13\x3e\x75\x41\xe5\x35\x18\x02\x71\xa8\x93\x20\x7d\x5d\x36\x03\xfa\xe2\xf3\x93\x40\xf0\x29\xd9\x1a\x27\x50\x8e\x6f\xc3\x19\xba\x81\xb8\x1e\xde\xb6\x8b\x55\xcd\xba\x15\xed\xd0\xd6\x7a\x6a\xb1\x1b\xb5\x56\xba\xe6\x36\x54\xe4\xee\x6a\xda\x0d\x76\x17\x7a\xbe\x46\x93\x2a\x69\xf0\x06\x1f\xb7\x1c\x6a\x76\xf0\xc0\x8f\x29\x17\x1b\x83\xbb\xfc\xfb\x60\x73\x70\x3c\xb9\xad\xa9\x5c\x97\xfe\x0a\x00\x00\xff\xff\x4d\x98\x44\x62\x57\x15\x00\x00")

func add_cmdTmplBytes() ([]byte, error) {
	return bindataRead(
		_add_cmdTmpl,
		"add_cmd.tmpl",
	)
}

func add_cmdTmpl() (*asset, error) {
	bytes, err := add_cmdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "add_cmd.tmpl", size: 5463, mode: os.FileMode(438), modTime: time.Unix(1579441188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datatableTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xcd\x8e\xd3\x30\x10\xbe\xaf\xb4\xef\x60\xcc\x4a\xdb\x95\x70\x2c\xd0\x8a\xc3\xe2\xe6\x02\x8f\x80\x04\x37\xe4\xc4\x6e\xe2\xca\xb5\xc3\x78\xd2\xb2\x8a\xf2\xee\x28\x69\x9a\xd0\x8d\xbd\x82\x1b\x39\xb4\xb1\x67\xfc\xfd\x8c\x33\x23\x94\x39\x12\xa3\xb6\x54\xff\x92\x87\xc6\xea\x1f\x27\x90\x4d\xa3\x81\x92\xd2\xca\x10\xb6\x54\x49\x94\x5f\x65\x61\x75\xb8\x84\x88\x42\x56\x78\x8f\x01\x41\x36\x8f\x34\x1f\x21\xa6\x6c\xf0\xa7\xeb\x8d\xd2\x5b\x16\x0e\xec\xfd\x07\x32\xbc\x1d\x14\xfb\x48\x73\xc1\x95\x39\xfe\x6d\xd6\x2a\x37\x4d\x41\x73\x81\x83\xd2\x3f\xfd\xcc\x3e\xce\x91\xf1\x97\x15\x1e\x94\x06\xad\xa6\x65\xed\x8f\x83\xab\x8b\x51\x4a\xc0\x5b\xbd\xa5\x15\x18\x45\xf3\xdb\x1b\xf2\xe2\x11\x58\x6b\xa9\xa2\x01\x98\x8e\x8e\x1a\xd7\x09\xc3\xd3\x75\x20\x5d\xa5\x49\x56\x7a\x1b\x48\xdf\xc7\xb3\x26\x9e\xbc\xeb\xb2\xbe\x17\x1c\xeb\x24\x9a\x76\x2a\x06\x22\x38\x42\x4c\x22\x4f\x8b\x2f\xbc\x7a\x8e\x04\x66\xc1\xe0\x4f\x21\xa5\x57\x44\xd9\x56\x10\xaf\xdb\x55\xb3\xdd\x98\xc0\x05\x2c\x61\x99\xa4\x6d\xbf\x56\xa6\x84\x6d\x81\x3b\xef\x31\x7e\xcb\xff\xeb\xd5\x46\x14\x0b\x3e\x7e\xe3\x57\xdd\x74\x7b\x33\xff\x87\x12\x4c\x73\x39\x73\xb7\xd9\xb5\xae\x44\xe3\x1d\xd9\x3c\x90\x6e\x01\xba\xdb\xdc\xbf\x9d\xfa\xe9\xfe\x21\xfb\x72\x69\x94\x4d\x77\xcd\x45\x1b\x59\x19\x57\xd1\x27\x82\xd0\xea\x77\x2f\x82\x56\xbb\x0a\xeb\xcf\xf5\x50\x22\xfa\x44\x76\xd2\x86\x55\x4e\xd0\x12\xca\xfa\x8c\x11\x4d\x18\x1b\x37\xcd\x61\xdc\xce\x27\x42\xb2\x45\xff\xcd\x28\xac\x93\xdc\x25\x78\x6b\xbf\xaf\x8f\xf7\x0f\x9f\xce\x8b\xf1\x45\xf0\xb9\x66\xe2\x0d\x63\x64\xae\x46\x20\x8c\x2d\x25\x25\x01\xca\x2d\x0d\x28\xd1\x94\x5c\xaa\x83\x71\x16\x35\x6f\x6c\x5b\x19\x17\xf8\x30\x6b\xc6\x7b\x09\x7c\xff\xb3\xd5\xf0\x9c\x2d\x63\x36\xdb\x87\x61\xf8\x2d\x2c\xff\x06\xc8\x8a\xf0\xc8\xf7\xe7\x9d\x09\x70\x19\xd6\xd7\xd8\xbf\x03\x00\x00\xff\xff\x13\xc4\x4d\x5b\xfc\x05\x00\x00")

func datatableTmplBytes() ([]byte, error) {
	return bindataRead(
		_datatableTmpl,
		"datatable.tmpl",
	)
}

func datatableTmpl() (*asset, error) {
	bytes, err := datatableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datatable.tmpl", size: 1532, mode: os.FileMode(438), modTime: time.Unix(1579239800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exe_cmdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x5d\x6b\xdb\x30\x14\x7d\x2f\xf4\x3f\xdc\x69\x1d\x38\x6c\x71\x9a\x41\x5f\xb2\xa8\x0f\x2b\x7b\x19\xa3\x1d\x6b\xde\x4a\x29\x8a\x75\x63\x6b\x95\x64\xa3\x8f\x2c\xc6\xf8\xbf\x0f\xd9\x71\x6b\x3b\xde\x06\x13\x24\x96\xef\x39\xf7\xeb\xdc\xeb\x35\x17\x7b\xb0\xae\x94\x48\x49\xc1\x38\x17\x3a\x5d\xc1\xf2\x1d\xb9\x3e\x3f\x03\x00\x68\xe0\x44\x32\x6b\x29\x49\x72\x39\x57\x7c\xbe\xfc\xd8\x81\x27\x04\x66\x78\x1f\x9b\xc2\xe7\x19\x32\x8e\x66\x4c\x6b\xa8\xd9\x55\xc7\x54\xf3\x4b\x72\x5d\x55\x71\xf0\x88\x37\xc2\x49\xac\xeb\xf5\x22\xbb\x9a\xf2\xb2\x8a\x49\x19\xc8\x1c\x6d\x62\x44\xe1\x44\xae\x03\xbb\xb5\x8f\xaa\x59\x70\xb1\xff\x57\x85\xdb\x9c\x97\x93\xf5\xed\x72\xa3\x40\x70\x4a\xf0\x80\x4f\x89\xe2\x4f\xc1\x40\x20\xd7\xd6\x6f\x95\x70\x94\x18\x74\xde\x68\xc0\x03\xde\x28\x1e\x55\x55\xdc\x02\x75\x3d\x9b\x8a\xd7\xf5\x77\x93\x6b\x87\xda\xd5\xf5\x29\xa5\x49\xbb\x35\x93\xce\x86\xe9\x14\xa1\x0d\xf1\x4d\xe8\xe7\x3f\xfb\x7b\xe7\x72\x3d\x68\x51\x0a\xfd\x0c\x5b\xa7\xc3\x6f\x5e\x18\xa1\x98\x29\x09\xb8\xb2\x40\x4a\xda\x9a\x1b\xf9\x6f\x99\x6a\x84\x6f\x23\x4c\x56\x81\x9a\x4f\x25\x5e\x2f\x82\x36\xff\xa3\xfe\x2e\xcf\x1d\x1a\xd2\xe8\x1c\x34\x36\x68\xbd\x74\x53\xfa\xfd\x68\x10\xfb\xf7\x1c\xfd\xf7\xee\xfe\xf2\x6c\xf7\xe5\x88\xee\xbc\x4e\xc2\xee\x74\xe3\xf3\x46\xce\xa0\x7a\x8d\xb4\x67\x06\x50\xa2\x02\x0a\x3c\x4f\xbc\x42\xed\xe2\x14\xdd\x17\x89\xe1\x6a\x3f\x97\x1b\x96\x06\xc1\x22\x22\x74\xe1\x1d\x99\x7d\x1a\xfa\x32\x6d\x81\xc2\xc3\xe3\xc8\x2c\x80\xc2\x65\xcf\xf6\x2b\x13\x12\x23\x01\x6f\x28\x6d\xd2\xc5\x12\x75\xea\xb2\x41\x29\xe1\x30\x6d\xe3\xc2\xdb\x2c\x0a\xa4\x07\xf1\x18\xef\x99\xf4\xd8\x4f\x1a\x8e\x80\xf7\x14\x96\x3d\x63\x7d\x7e\x36\xcc\xcf\x99\x63\x40\xe1\xeb\xfd\xdd\x6d\x6c\x9d\x11\x3a\x15\xbb\x32\x62\xda\x86\x50\xaf\xd4\x8b\x98\xfd\x64\x87\x68\x54\x84\x37\x72\xe5\x8d\xfc\x30\xb4\x86\x3d\x5a\x91\xef\x77\xf7\x1b\x32\x42\x42\xb2\x55\xf8\x1b\xd9\xad\x4f\x12\xb4\x76\xd5\xcd\x20\x6a\xa7\x3e\xab\x4e\xa7\x7e\x11\x91\xb7\xbd\xbd\x98\xc5\x99\x53\xb2\xe3\x8f\xba\xef\x2d\x66\x3d\x6c\xe7\xf8\xa5\xee\x98\xb4\xf8\x02\xd4\x61\x35\x8e\x3b\xf1\x3b\x00\x00\xff\xff\xdc\xdc\xa9\xc9\x18\x05\x00\x00")

func exe_cmdTmplBytes() ([]byte, error) {
	return bindataRead(
		_exe_cmdTmpl,
		"exe_cmd.tmpl",
	)
}

func exe_cmdTmpl() (*asset, error) {
	bytes, err := exe_cmdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "exe_cmd.tmpl", size: 1304, mode: os.FileMode(438), modTime: time.Unix(1579240473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _footerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x81\xbc\x83\x96\xbb\xe3\xfb\x70\x0d\x85\x6d\xa7\xf5\xd6\x17\xd0\x6a\x3b\x16\x38\xd2\x88\x95\x96\xbc\x7d\x49\xdd\x42\x7d\xfb\x2d\xfd\xdf\x87\xdc\x87\x31\x70\x42\x62\xf8\x11\xd1\xb8\x80\x31\xbe\xef\x5c\x6a\xe1\x52\xb0\xd6\xc3\x30\x23\xb1\x69\x5f\x83\xef\x3b\x00\x80\x47\xef\x2c\xa0\x39\xc2\x42\x53\xd6\x56\x7c\x8c\x02\x5d\x5f\xcd\x54\x04\xd5\xb4\x85\x60\x58\x38\x42\x30\x75\x36\xc4\x85\x38\xbe\x60\xfb\x3b\xf2\xa6\x99\x78\x82\x4d\x56\xb8\x21\xeb\x13\x66\x03\x5d\xdf\x9d\x5f\x31\xe1\x5a\x14\xb4\xb9\x4b\x4c\xef\xea\xaa\x8b\xf0\xe4\x4f\x18\x22\xfc\x6d\x70\xbb\x6c\xb0\xd6\x9d\xea\x10\xf2\x12\xd3\x61\xc8\xaa\xff\xf5\xd3\x5a\x0c\x33\x71\xd1\x38\x92\x0c\xfe\xb8\x87\xdf\xf3\xf7\x48\xe2\x2c\xfa\xd1\xd9\x27\xa8\xef\x9c\x6d\x87\xfb\x7b\x00\x00\x00\xff\xff\x1a\x17\xaf\xd0\x2a\x01\x00\x00")

func footerTmplBytes() ([]byte, error) {
	return bindataRead(
		_footerTmpl,
		"footer.tmpl",
	)
}

func footerTmpl() (*asset, error) {
	bytes, err := footerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.tmpl", size: 298, mode: os.FileMode(438), modTime: time.Unix(1578216260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcd\x6e\xdb\x30\x0c\x80\xef\x05\xfa\x0e\x9c\xae\x8d\xec\x0c\x0b\xb0\x21\x88\x32\x14\x18\x56\xec\x56\xa0\x7d\x01\x46\xa6\x63\x62\xfa\xf1\x44\x3a\x59\xdf\x7e\xb0\xdc\x05\xeb\xba\xd3\x7a\xf0\x81\x24\xf8\x7d\x24\xad\xdd\x40\xd8\xed\xaf\xaf\x00\x00\x76\x91\x14\xc1\x0f\x58\x84\xd4\x99\x49\x7b\xfb\xc9\xbc\xa8\x25\x8c\xe4\xcc\x89\xe9\x3c\xe6\xa2\x06\x7c\x4e\x4a\x49\x9d\x39\x73\xa7\x83\xeb\xe8\xc4\x9e\x6c\x0d\x56\xc0\x89\x95\x31\x58\xf1\x18\xc8\xbd\x7f\x49\x1a\x54\x47\x4b\x3f\x26\x3e\x39\xf3\xd3\x4e\x68\x7d\x8e\x23\x2a\x1f\x02\xfd\x81\x65\x72\xd4\x1d\x69\x6e\x7d\x6e\x56\xd6\x40\xfb\xbb\xdb\x2e\x72\xda\xb5\x4b\x74\x29\xbe\xb3\x16\xbe\xe6\xa4\x70\x7b\x26\xc9\x91\xe0\x9b\xcf\x49\xc0\xda\xdf\xea\xc0\xe9\x3b\x14\x0a\xce\x88\x3e\x05\x92\x81\x48\x0d\x0c\x85\xfa\x39\x83\xca\xbe\xc5\x99\x1c\x94\xda\x31\x4c\x47\x4e\xd2\xf6\x39\x29\x2e\x3c\xdb\x17\xa2\xd6\x8b\xb4\x18\x42\x13\x39\x35\x5e\xe4\xb2\xd7\x6c\x7f\x1c\x28\x12\x54\xf8\x7f\x6a\x3b\x16\x5d\x14\xcf\x99\x7f\x7a\xbe\xa0\xe2\x23\x1e\x02\xbd\x75\xbb\x0e\x15\xb5\x82\xec\x41\x36\x55\xdc\x5d\xd8\xcd\x21\x67\x15\x2d\x38\x6e\x5e\x4d\x70\x97\xf3\x31\x50\x3d\xf7\x16\x1e\xf2\x54\x3c\xc1\x03\x26\x81\xfb\x92\xff\x9e\x69\x19\x61\xfe\xe5\xb2\x6d\xeb\x41\xa5\x39\xd6\x7e\x1c\x59\x1a\x9f\xe3\x2c\xfe\xdc\x63\xe4\xf0\xe4\x16\xd8\xcd\x0c\xbb\xb9\x2f\x79\xfb\x61\xbd\x5e\x6d\x96\x8f\x57\x1f\xd7\x6b\xf3\x6a\xc7\xfd\xf5\xd5\xae\xad\x0f\xf9\x57\x00\x00\x00\xff\xff\x9a\x83\x18\x2d\xcf\x02\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 719, mode: os.FileMode(438), modTime: time.Unix(1579078932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6f\xa3\x38\x14\xbe\x23\xf1\x1f\x5e\xd9\x1c\x12\xa9\x90\xed\xae\xba\x87\x6e\x92\x4b\x5b\xa9\x95\xba\xbb\xdd\x36\xd5\x68\x4e\x23\x07\xbf\x04\x37\xc6\x30\xb6\x49\x1b\x21\xfe\xfb\xc8\x06\x12\x20\x21\xed\x61\x34\x37\xb0\xbf\xf7\xde\xe7\xef\x7b\xf8\x31\x39\xbb\xf9\xef\x7a\xfe\xf5\xf1\x16\x22\x1d\xf3\x99\xeb\x4c\xce\x7c\xdf\x75\xe6\x11\x53\xc0\x14\x10\x50\x9a\x48\x8d\x12\x34\xc6\x29\x27\x1a\x21\x25\x2b\x0c\xe0\x45\x21\x68\x03\x32\xaf\xa0\x93\x12\x07\xdb\x24\x93\x20\xf0\x0d\x52\x99\xbc\x62\xa8\x61\x29\x93\xd8\x75\x54\x28\x89\x0e\xa3\x00\xe6\xbb\x90\x15\x6a\x05\x92\x51\x48\x96\x40\x38\x07\xce\xc4\x5a\x01\x11\xd4\x84\x6e\x18\x45\x05\x3a\x42\x10\x88\x14\x29\xc4\x44\xae\xb3\x14\x12\xc1\xb7\x81\xeb\xf8\xbe\x21\x6a\x08\x03\x27\x62\x35\xf5\x50\x78\x33\xd7\xc9\xf3\x1d\x49\x2f\x42\x42\x51\x06\x3a\x4e\xb9\x57\x14\xae\xe3\x3a\x93\x45\x42\xb7\x10\x72\xa2\xd4\xd4\x8b\x12\x4e\x7d\x2d\x89\x50\x4c\xb3\x44\x80\x62\x14\x17\x44\xfa\x31\x13\xcc\xa4\x9a\x50\xb6\xa9\xb1\x6f\x92\xa4\x29\x4a\xb3\xec\x3a\x00\x00\xcd\x3a\x82\x6c\x16\xa4\x55\xa7\x8b\xa8\x52\x97\x10\x08\xaa\xd7\x3d\xd6\x08\x0e\xd7\x89\xd0\x28\x34\x7c\x29\x6b\x05\x76\x81\x30\x51\x89\x15\x56\xdb\xf6\xe0\x36\xa8\xc1\xaf\xda\xf4\x6b\x9e\xc0\xe8\xd4\x8b\x09\x13\x7e\xb5\xe3\x55\x41\x07\xd5\xee\xac\x48\x30\x7c\x34\x35\x4a\xc5\x46\xfb\x1a\x7d\x75\x4a\x60\x33\xe9\x31\x24\x61\x02\xa5\xbf\xe4\x19\xa3\x5d\x68\x17\x2e\x93\x37\x88\x17\xfe\x1f\xc7\x70\x87\xa9\xb9\xaf\x62\xff\xaf\x3e\xac\xc5\x47\x17\x35\x3c\xf6\x7f\x07\x8d\xef\xda\xa7\x44\xae\xbd\xd9\x73\xd5\xcc\xe6\xc0\x93\x71\x74\xd1\x57\x70\x4c\xd9\x66\x66\xa5\x1a\x07\x61\xc2\xdb\x9a\x1c\x45\x99\x33\x1c\xa0\x3a\x79\x5a\xa2\x74\x74\xb6\xc8\x8e\x4d\x65\xcc\x5e\xf2\x32\xa4\x03\xfa\x87\x30\x71\xd8\x1f\x3d\xde\xfd\x5c\xd3\xfa\x3c\xc8\x73\x49\xc4\x0a\x61\xc0\x04\xc5\xf7\x73\x18\x84\x44\x52\xb8\x9a\x42\x60\x1e\x94\x69\xfd\xa3\xaa\x77\x6c\xe6\x2b\xff\xcf\x93\x36\x37\xf1\x44\x1e\x65\x7c\x0a\xdf\xd3\xc8\x47\x43\xa3\xcb\x46\x47\x79\xb3\x3c\xb7\x67\x0a\xe6\x4c\x73\x2c\x8a\xc9\x38\xba\xfc\xa8\x78\xc7\xe0\x4f\x11\x34\x37\x96\xd7\xb2\xbc\x37\x34\x6d\x05\x9a\x96\xdf\xb3\xac\x3e\x77\xc3\x33\xfd\x54\xb6\x9d\x81\xe6\x52\x66\xf4\xbc\x7c\x30\x0e\x96\x09\x1f\x98\x58\xf7\xb9\x78\xc0\x8c\x40\x24\x71\x39\xf5\xf2\xdc\x66\x09\xee\x24\x2e\x8b\xc2\x6b\xf1\x35\x1b\x96\xaf\x45\xfc\x4b\x62\x2b\x2a\xf9\x84\x33\x79\x8e\x82\x7e\xc4\xe5\x23\xf1\x4f\xed\x9f\xda\xeb\x2d\xde\x17\xf4\x2b\x2e\x8b\xc6\x90\x68\xe0\x3a\x17\x4a\x35\x2b\x9a\x37\xca\x91\x99\xf5\x4d\xb2\x55\xa4\x4f\x0d\xb7\x65\x92\xe8\xe6\x98\xad\x4b\xda\x72\xc1\xb8\x53\xc6\xae\x3e\xdd\xfe\xff\x72\xff\x74\x7b\x03\xcf\xd7\x4f\xf7\x8f\xf3\xe7\x7a\xb3\x99\xf6\xf5\x7b\x86\x72\xdb\x48\xab\x42\xc9\x52\x5d\x9d\x65\x99\x89\xd0\x4e\xed\x87\x84\xd0\xaa\xb9\x87\x99\xe4\x23\xc8\xf7\xa2\x0c\x02\xf2\x4a\xde\x87\x79\x5b\xe4\x4c\xf2\xab\x4c\xf2\xf3\xf6\xaa\xca\xc2\x10\x95\xba\xaa\x13\x0f\x25\xaa\x8c\xeb\x51\x7e\xe8\xe0\x60\xe8\xfd\xd6\x9a\xad\xa3\xc0\xfc\x87\xd4\x11\x7f\xb7\x23\x8a\xa2\x5e\xb1\xda\xec\x4e\x31\x19\x9b\x4f\xdb\x3e\x54\xbf\x5d\x3f\x02\x00\x00\xff\xff\x5c\xd3\x57\xfa\x88\x09\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2440, mode: os.FileMode(438), modTime: time.Unix(1579622333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jqueryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\xd4\xd5\x55\xc8\x0a\x2c\x4d\x2d\xaa\x54\xd0\xd5\xb5\xe3\xe5\xb2\x29\x4e\x2e\xca\x2c\x28\x51\x28\x2e\x4a\xb6\x55\x2a\x2e\x49\x2c\xc9\x4c\xd6\x4f\x4c\xc9\xcd\xcc\xcb\x29\x49\xd5\x2f\xc8\x29\x4d\xcf\xcc\x2b\xd6\xcf\x2a\x04\x69\x80\x52\x7a\xb9\x99\x79\x7a\x59\xc5\x4a\x76\x36\xfa\x10\xbd\x20\x53\x40\xc6\x3a\xe5\xe7\x97\x14\x97\x14\x25\x16\x28\x98\x90\x60\x76\x12\x4c\x97\x7e\x16\x12\x47\x2f\xa9\x34\x2f\x25\x27\x15\xa7\x5d\x8e\x20\x63\x7c\x42\x5c\x15\x1c\x0b\x0a\x88\xb0\x2c\x25\xb3\xb8\x04\x64\x3e\x4c\x00\xd3\x5c\x40\x00\x00\x00\xff\xff\xeb\x75\xef\x95\x19\x01\x00\x00")

func jqueryTmplBytes() ([]byte, error) {
	return bindataRead(
		_jqueryTmpl,
		"jquery.tmpl",
	)
}

func jqueryTmpl() (*asset, error) {
	bytes, err := jqueryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jquery.tmpl", size: 281, mode: os.FileMode(438), modTime: time.Unix(1579078926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _navbarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x4d\x6e\xe3\x30\x0c\x85\xf7\x01\x72\x07\x8d\xb2\xe6\xf8\x02\xb6\x80\xd9\xcd\x62\x30\x05\xda\x13\xd0\x11\x6d\x13\x91\xa9\x40\x3f\x4e\x8f\x5f\xd8\x8e\x03\x07\x4d\x13\xb4\x68\xbd\x11\x04\x3e\xf2\x23\xfd\xa8\xf2\x17\x80\xfa\x8f\x43\x8d\x41\x01\x98\xed\xa6\x14\x1c\xd4\xde\x61\x8c\x95\xee\x91\x05\x3a\x42\x4b\x41\xc9\xac\x99\x0f\xa0\xd7\x23\x8a\x5d\x6e\xa7\x8e\x13\x2d\x17\xc7\x6d\x97\xb4\xd9\x6e\x94\x52\x6a\x2a\xff\x8f\x9a\xb4\xe4\x3b\x96\x43\x9c\x49\x53\x3c\xbb\x05\x76\x4e\x17\x1c\x96\xe4\x49\xe0\x78\x25\x00\x4e\xd4\xaf\xc3\x93\x04\xd7\x8a\x11\xa0\x95\xc5\x84\x70\x62\xdb\x52\xaa\xf4\x31\xc7\xae\x27\xc9\x5a\x75\x81\x9a\x4a\xef\xb4\x29\x2f\x55\x1b\x8c\xaa\x41\xa8\x31\x44\x6d\xca\x82\x4d\x59\xe0\x9a\x5f\x38\xbe\xdf\x8e\xb2\x20\x5e\x48\x59\x88\x3d\xb0\x38\x16\x82\xda\xf9\xfd\xe1\x46\x9f\x33\xbf\xd0\xef\x1a\x36\x7f\x7d\x4f\x3f\x4f\xde\xdd\x20\xff\xa9\x7d\x4e\x1f\xa2\xcb\x22\x3b\xb3\xdd\xac\xdc\x7c\x1e\xfd\xfd\x8c\x9d\xaa\x77\x80\x39\xf9\x07\xb6\x7e\xe1\x3f\x46\x6e\xc5\xe7\x74\x63\xa8\x17\x6e\xe5\xe9\xce\x58\xdf\xb5\x5a\x7b\x2f\x29\x78\x07\x91\x2d\xd5\x18\xce\xd1\xe8\xd8\x52\xa5\x53\xc8\x74\xb5\x73\xd7\xc5\xd7\xdf\xf5\x32\xa6\x0e\x1c\x86\x96\x1e\x2c\xe4\xd9\x9b\xb2\x10\x1c\xc6\x73\x74\xa7\xf8\x2d\x97\xc7\xfc\x16\x00\x00\xff\xff\xa1\x57\x5c\x96\xdc\x03\x00\x00")

func navbarTmplBytes() ([]byte, error) {
	return bindataRead(
		_navbarTmpl,
		"navbar.tmpl",
	)
}

func navbarTmpl() (*asset, error) {
	bytes, err := navbarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "navbar.tmpl", size: 988, mode: os.FileMode(438), modTime: time.Unix(1579622998, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x4b\x6f\xe3\x36\x10\xbe\x07\xc8\x7f\x98\xaa\x01\xb2\x01\x4a\x0b\x68\x7a\x2a\x64\x01\xdb\x3d\xf4\x92\x2d\xd0\x6e\x81\x1e\x17\x23\x71\x64\x13\x21\x87\x2a\x45\xdb\x09\x0c\xff\xf7\x82\x94\xe4\x48\x7e\xa9\xc9\xa2\x68\xbb\x3a\x68\xd7\xe0\x3c\xbe\x79\x7c\x5f\xc4\xec\x1b\x21\xe0\x23\x2a\x86\x4f\x4a\x52\x81\x0e\x3e\x58\xf6\xa8\x98\x1c\x08\x91\x5f\x5f\x65\xd8\x28\x49\x50\x6a\x6c\x9a\x79\x62\x50\xb1\x68\x3a\xcb\xee\x5f\x21\xd1\x3d\x8a\xda\x29\x83\xee\x19\x48\xd3\x1a\xbd\xb2\x2c\x7e\x48\xf2\xeb\x2b\x00\x80\x98\xe3\x27\x87\x2c\xe1\xc1\x2e\x6c\x1b\x37\x1e\x20\x2c\x1d\x55\xf3\x44\xb1\xa4\xa7\xfb\xd9\xd2\x1b\x9d\xf4\xa9\x8a\xe0\x20\xb4\xe2\xc7\x3e\x4e\x74\x69\x6a\xe4\xb1\x89\xa7\x27\x0f\x95\x65\x2f\x36\xa4\x16\x4b\x2f\x74\x78\x27\xf9\xcf\xef\xa5\x51\x9c\xa5\xc1\xa3\x4f\x98\x62\x7e\x7d\x35\x40\xd5\x17\xfd\x02\x49\xaa\x75\x1f\xbe\xab\x6f\x94\x7e\xe8\xb4\x6a\xc8\x41\x8d\x4c\x1a\xde\xd9\x3a\xd4\x8c\xfa\xee\x25\xd4\x61\xb8\x60\x2e\x5a\x73\xe3\xc5\x3d\xd4\x85\xb8\x07\x13\x5e\x52\x54\x9a\x9e\x86\x79\x0e\x7d\x15\x57\xf6\xf0\x7c\xd4\xc1\x6f\xf7\x7d\x93\xa2\xd0\xb6\x7c\x4c\xf2\xed\x76\x16\x52\x32\x1a\xda\xed\xda\xca\x47\xae\xa9\x54\xeb\x21\xd4\xee\xf7\x99\x62\x3f\x12\xaf\x0e\x6a\x63\xdc\xe3\x33\x5e\x7c\x7f\x84\x7f\xa5\xfb\xe3\x60\xc9\xb8\x16\xb5\xd2\xba\x89\xff\xeb\x77\x28\x14\x2e\x4a\xab\x57\x86\x13\x90\xe8\x51\x6c\x94\x5c\x90\x9f\x27\xde\x11\xad\x15\x6d\x12\x70\x56\xd3\x3c\x31\xc4\xab\xce\x04\xcb\xd2\x3a\xa9\x2c\xcf\x93\x0a\x75\x43\x27\x3b\x13\xc0\xbf\x97\x12\x54\x69\xb9\x01\x6f\xc1\x2f\x09\xc2\x3a\x35\xb0\x6a\x14\x2f\xe2\xef\x59\xc0\x12\x2c\x5a\xa4\xc7\x61\xe2\xb3\x51\x7e\xd9\x6e\x18\x6e\xa8\xb1\x86\xc0\x3a\x40\x7e\x06\xeb\x97\xe4\x62\x86\x78\x0c\x5a\x15\x2e\x90\x60\xd4\xa7\x3d\x22\xad\x06\xfd\x10\xca\x93\x81\x25\x36\x62\x5f\xe8\x09\x9f\x33\x33\x0e\xfe\x87\xcc\x38\x72\x1b\x67\x8b\x18\xb1\x01\xa8\x50\x84\x26\x16\x18\xfa\x96\xa5\xea\x52\x88\xfa\xc2\x61\x78\x7e\xc7\x42\xd3\xb9\xae\x1d\xe1\x70\x81\x97\x11\x44\x85\x02\x79\xa1\x49\x68\xaa\xfc\x24\x8a\xf4\x1c\x8c\xe3\xa5\xde\x9f\x1c\xef\xde\x54\x9b\xc3\xb3\xdd\xc2\x4d\x0d\x3f\xce\x61\x56\x3b\xaa\xd4\x13\xec\x76\x97\x8c\x1d\xf2\x82\xe0\x26\xaa\xd7\x77\x70\x43\x9a\x0c\xb1\x8f\xfe\x3e\x76\xe6\xa2\x3f\x9c\xde\x89\x4b\xf8\xf6\x6e\x83\x95\xb0\x5c\x6a\x55\x3e\xce\x93\x07\x8b\x32\x88\x37\xb1\x7f\x77\xdb\x56\xb2\xdb\xa5\xdb\x6d\x8f\x6b\xb7\xbb\xbd\x3b\xda\x20\xd0\x16\xa5\x88\x68\xff\x4e\x62\x18\x0d\xb4\x0a\x04\x46\x51\x2a\x57\x6a\x82\x7e\xcd\xa6\xe6\x39\x8a\x55\xe7\x43\x80\xe7\x47\x3d\x72\x3a\x3b\xf6\x17\x0b\x7d\x09\xc1\x76\x4b\x2c\xcf\x8d\x26\x4b\x57\xfa\x14\x7b\x4f\x87\xfc\x6f\x90\xba\x42\xe1\xb1\x5c\x5a\x43\x9e\x9c\x40\x3d\xcd\xa9\xa9\x3e\x7f\xb0\xc6\x20\xcb\xff\x1b\xb7\x41\xc9\xf6\xef\xf6\xe7\xd2\xc8\x8b\x8d\x7c\x3d\xf1\xa6\x49\x57\x1a\xf9\xe5\x14\x1b\xd3\xeb\xb5\xa4\xca\xea\x3c\x53\x79\x56\xe4\x28\x25\x30\x6d\xa0\x6c\x07\x99\xa5\x45\x8c\x30\xcd\xb0\xcb\xec\x9a\x64\x56\xaf\x89\xb2\x13\xc4\xa8\x86\x1d\x88\x7f\x51\x0f\x4b\x23\x83\x14\x2a\xf9\xcf\xa8\xe0\x9b\xb5\x6f\xf6\x4b\xf7\x79\xf6\x15\x08\xdf\x5b\xb4\xee\xcc\xb8\x1c\x6e\x3e\x37\x7f\xea\xdb\xbb\xb7\x89\xe1\x23\x3d\x17\x16\x9d\xfc\x62\x19\xfc\x0d\x37\xf0\xe9\xd7\x87\x89\xa6\x0f\xef\x24\xad\x10\x16\x28\x17\xd4\xbe\x85\x0c\x8c\x70\x49\xfe\x07\x3a\x56\xbc\x18\x5d\x48\x4e\x86\x7b\xa5\x26\x76\x03\x3a\xfc\xba\x1f\x0d\x33\x4b\x19\xd7\x87\xf7\x98\x74\xd6\xdf\xe0\xcc\xe8\xe3\x7e\x78\x33\x18\x1b\x76\x57\xc2\x34\xde\x09\xf3\xbf\x02\x00\x00\xff\xff\xcf\xda\xd5\x2b\x3c\x0e\x00\x00")

func sidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarTmpl,
		"sidebar.tmpl",
	)
}

func sidebarTmpl() (*asset, error) {
	bytes, err := sidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar.tmpl", size: 3644, mode: os.FileMode(438), modTime: time.Unix(1579441275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebar_rightTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x4d\x0e\x83\x20\x10\x85\xf7\x26\xde\x61\xea\x7e\xca\xa2\x71\x47\xd9\xf4\x08\xf6\x02\x54\x26\x85\x94\x08\x61\x88\xe7\x6f\x40\x49\xd4\xdd\xfc\xbc\xf9\xde\x3c\x79\x43\x84\x57\x58\x72\x0a\x1e\x26\x67\xe8\xa3\x13\x20\xaa\xbe\x93\x9a\x9d\x21\x98\xbd\x66\x7e\x0e\xf3\x26\x41\xde\x25\x97\x1e\x8d\x4e\xbf\x41\xf5\x1d\x00\xc0\x89\x79\x3c\xa0\x25\xc3\x37\x10\x83\xa5\x44\x9b\x4b\xd5\x1b\xb7\x36\x9f\x88\x8f\x86\xa9\x2b\x3b\xaa\xb7\xcb\x9e\xa4\xb0\xe3\x71\x1e\xd5\x74\x06\x4b\x11\x1b\x4e\x18\xb7\x96\x00\xa2\x26\x28\x55\x79\x48\xdc\xaf\x19\x10\xd5\x3f\x00\x00\xff\xff\x21\x32\xef\x13\xff\x00\x00\x00")

func sidebar_rightTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebar_rightTmpl,
		"sidebar_right.tmpl",
	)
}

func sidebar_rightTmpl() (*asset, error) {
	bytes, err := sidebar_rightTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar_right.tmpl", size: 255, mode: os.FileMode(438), modTime: time.Unix(1578194347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _signinHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5d\x6f\xdb\x36\x17\xbe\x0f\x90\xff\x70\xca\xf6\x7d\x9b\x00\xa5\x64\x27\x4d\x5b\xa8\xb2\xb1\xed\x66\xd8\xd5\xba\xb5\xbb\x1a\x86\x81\x12\x8f\x2d\x26\xfc\x50\x49\x2a\xb1\x33\xf4\xbf\x0f\xa4\x45\x5b\x96\xed\x34\x53\x80\x48\xe4\xf9\xe0\xc3\xe7\x7c\x90\x2e\x5f\x70\x53\xfb\x75\x8b\xd0\x78\x25\xe7\xe7\x67\x65\x78\x83\x64\x7a\x39\x23\xa8\x49\x9c\x41\xc6\xe7\xe7\x67\x00\x00\xa5\x42\xcf\xa0\x6e\x98\x75\xe8\x67\xa4\xf3\x0b\xfa\x81\x24\x99\x17\x5e\xe2\xfc\xb3\x58\xea\x5f\x74\x99\x6f\x46\xe7\x67\xbd\xd0\xf9\x75\x1c\x42\xff\x64\x15\xa7\xad\x64\x35\x36\x46\x72\xb4\x54\xa8\x25\xfc\xb3\x13\x87\x67\x61\xb4\xa7\x4e\x3c\x62\x01\xd3\x6c\x7a\x75\x63\x51\x7d\xdc\xd7\xf0\xb8\xf2\x94\xe9\xba\x31\xb6\x00\x25\x38\x97\x38\xd2\xa0\x0f\x58\xdd\x09\x4f\x3b\x87\x96\x3a\x94\x58\xfb\x02\xb4\xd1\x07\x7a\xca\x3c\x3e\x43\xc9\x7d\x57\xe7\x29\xf9\xb7\xc4\x46\x78\x7e\x50\xc8\x05\x83\x0b\x25\x34\x7d\x10\xdc\x37\x05\xbc\x7f\xf7\xa1\x5d\x5d\x8e\x69\x38\xc2\x14\x95\x07\x64\x8d\x08\xbb\xce\x8e\xd0\xf5\xed\x04\x94\x10\xf2\x37\xbb\x61\x65\xf8\x7a\xec\xbe\x41\xb1\x6c\x7c\x01\xd3\xc9\xe4\x7f\xa7\x76\x74\xcc\x8e\x0b\xd7\x4a\xb6\x2e\x22\x77\x0b\x89\xab\xca\xac\x3e\x9e\x50\x09\xe2\x23\x8c\x87\x69\xca\xa4\x58\xea\x02\x6a\xd4\x1e\xed\x48\x29\xca\xa8\xf0\xa8\xdc\x09\x8d\x96\x71\x2e\xf4\x92\x7a\xd3\x16\xf0\x76\xd2\x8e\x97\x49\xf2\xca\x78\x6f\xd4\x51\x95\x8a\xd5\x77\x4b\x6b\x3a\xcd\x69\x6d\x64\xc8\xb7\x97\x8b\x9b\xf0\x77\x8a\x8d\x6c\x61\xac\xa2\x4e\x2c\xb5\xd0\x63\x56\xfa\x78\x8f\xc8\x0c\x8f\x62\xab\x94\x0d\xd7\xd7\x27\x81\x16\x30\xbd\x39\x90\x29\x66\x97\x42\x17\xc0\x3a\x6f\xf6\x41\x1d\x85\x94\xd5\x0d\xd6\x77\x95\x59\x1d\x2d\xbb\x87\x3e\xde\x6f\x27\x93\xe7\xf8\x8a\x83\xda\x68\x6f\x8d\x1c\xfb\x6b\x8d\x13\x5e\x18\x5d\x80\x45\xc9\xbc\xb8\x1f\x97\x4c\x65\x56\x21\x6b\xe3\xbe\x2a\x63\x43\x8e\x1f\x66\x49\x4a\xc0\xd1\xee\xf6\x49\x39\x24\x6c\xd8\x43\xde\xed\x49\x9f\xb5\x97\x62\x61\xea\xce\x8d\x77\xf4\x48\x85\xe6\xb8\x2a\xe0\xea\x19\xfe\x84\x6e\x3b\xff\x67\x68\xb1\x33\x82\x8a\x09\x49\xfe\x1a\xfb\xdb\x44\x6e\x9b\x7d\x74\x7a\x98\x7d\x89\x96\xa0\x41\x6d\xa0\x82\x5a\xc6\x45\xe7\x0a\x98\x3c\xa9\x2b\x71\x71\x5c\xf5\x39\x78\x5b\xe6\xdc\x83\xb1\xfc\xbb\x90\x8f\x30\xdf\xc3\xf0\xa6\x3d\x8d\x61\xa4\x77\x7a\x5f\x3d\xd8\x32\x4f\xc7\x48\x3f\x7e\x41\x29\x7c\x69\x50\x21\x44\x01\x50\x9a\x0e\x23\x29\xf4\x5d\x48\xb8\x19\x89\x12\xd7\x20\x7a\x02\x8d\xc5\x45\x98\x61\x5e\xd4\x39\xe3\x4a\x68\xe9\x31\xe7\xc2\xf9\xbc\x76\x6e\x3b\x93\x29\xa1\xb3\xda\xb9\x78\xfc\xe5\xfd\xf9\x57\xc6\xfe\x56\x4b\xe6\xdc\x8c\xc4\x93\x67\xd3\x6b\x20\xf4\x65\xea\x2d\xd3\x9b\x3c\x07\x69\x02\x35\x2d\x5b\x62\xb4\x0f\xe4\x82\xe0\x33\x12\x08\xee\xda\xbf\xc3\x98\x24\x3f\x03\xe6\x09\x18\xed\xba\x4a\x09\x3f\x23\x16\x7d\x67\x35\x6c\x86\x9b\x13\xf5\xe2\x72\x7b\xd0\x72\x71\x9f\xec\x37\x6b\x49\xb3\x34\x64\x70\xb8\x96\xac\xdf\xe9\x4b\x32\x2f\xab\xf9\xcf\x65\x5e\xcd\x7f\x0c\x7b\x2b\x73\x96\x9c\xe4\x5c\xdc\xa7\xef\x66\x9a\xfc\x35\xd7\xa0\x2a\x7a\x3d\x6c\x02\x54\x1b\xab\x98\x24\xf3\x4f\x12\x99\x43\x08\x68\x21\xb8\x6a\xa6\x5b\xb2\x59\x85\x12\x16\xc6\xce\x48\x4c\x9f\x3f\x1c\x5a\xcd\x14\x6e\xb7\xe9\x2c\x35\x5a\xae\xc9\x3c\x49\xca\x3c\xda\x24\x07\xd1\x2a\x92\x34\xb2\x0f\xff\x67\xa4\x1b\xfb\x1b\xd6\x28\x81\xc1\xe9\x38\x23\x3b\x5b\x8b\x5f\x3b\x61\x91\xc7\x9e\x11\x0b\xf9\x14\xde\x4f\x29\xcf\x0f\xf0\x26\xc9\x51\xbc\xa3\x22\xd9\xe1\xdf\xf9\xdb\xe0\x6f\xc7\xfe\x9f\xc0\xbf\xb3\x4d\xf8\x8f\x84\x7d\xdb\xbb\x43\xb0\xf6\x22\x3f\x84\xb9\x9d\x1c\xc2\x4d\xa6\x04\xee\x99\xec\x30\xe4\x9a\x42\x55\xa1\x4d\x60\xb7\xe3\x39\xfc\xde\x7f\x82\xc2\xc1\x12\xfb\x54\x0c\xf3\xa8\xea\xbc\x37\x3a\x81\xac\xbc\x86\xca\xeb\x70\x59\x09\xaf\xd6\x0a\xc5\xec\x3a\x7e\x57\xd2\xd4\x77\xa4\x47\xb4\xc9\x72\x12\x6f\x8e\x31\xb1\x36\x6e\x92\xd3\x36\xf9\x53\x9e\xde\x6c\xb2\x33\x56\x9f\xea\x3c\x72\x32\xff\x7f\x6d\xda\xf5\x47\xb8\x9a\x4c\xdf\xd3\xab\xc9\xd5\xa4\xcc\xdb\x58\xb5\x81\xe2\xf8\x11\xca\x36\x76\x8c\xd2\xd5\x56\xb4\xbe\xf7\xbb\xe8\x74\x1d\xcb\x75\xbf\xc8\x86\x8d\xee\x55\xc6\x6e\xd9\xea\x62\xd4\xfa\x02\xe8\x02\xc8\xa7\x5f\x3f\x7f\x21\x6f\x46\x97\x3f\x2b\x0b\x20\x79\x5f\xcf\x23\x21\x67\x9e\x15\xf0\xea\xe2\xf5\xcb\x41\x23\x78\x7d\x99\x39\xb4\x82\x49\xf1\x88\x17\x97\x23\x0b\xd7\xd5\x35\x3a\x57\xec\xb0\x5e\x58\x74\x9d\xf4\x07\x77\x44\x88\x97\x0a\xcd\xcd\x43\x26\x4d\xcd\x82\x6e\x16\x3a\x00\xcc\x80\xe4\x64\x7c\x0d\x1c\x2d\x83\xd6\x86\xfb\xcc\xb3\x16\x61\x12\xad\xef\x15\x32\x8b\xae\x35\xda\xe1\x17\x5c\xf9\xcb\x27\xee\x9a\x43\x59\xdf\xd9\x16\x4c\xba\x74\x0f\xf8\x16\xa2\xb4\x8d\xcd\xf9\x59\xec\xea\xb7\xbf\x75\x68\xd7\x9b\x86\xde\x07\x0e\x9c\xad\x0f\x9b\x77\x2b\xbb\xa5\xd0\x2e\xbf\xfd\x1a\x0c\xfa\x57\x6c\xe0\xb7\x8e\xcc\x07\x8e\xa3\xdb\x9f\x8c\xf1\xce\x5b\xd6\xc2\xdb\xff\xe0\xbb\x4a\x56\xf9\xed\x60\x90\x55\x9d\xe6\x12\x8f\xae\x95\xf7\x3f\xa7\xfe\x0d\x00\x00\xff\xff\xb4\x2d\xce\x68\x60\x0d\x00\x00")

func signinHtmlBytes() ([]byte, error) {
	return bindataRead(
		_signinHtml,
		"signin.html",
	)
}

func signinHtml() (*asset, error) {
	bytes, err := signinHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "signin.html", size: 3424, mode: os.FileMode(438), modTime: time.Unix(1579620422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6f\xdb\x30\x0c\xbd\x17\xe8\x7f\xe0\xd4\x0e\x8d\x81\xc9\x6e\x56\xec\xe2\x38\xb9\x0c\x05\x76\x28\xb0\xb6\x19\xb0\xe3\xa0\x58\x6c\xad\x55\xb1\x12\x4a\x8e\x13\x14\xfd\xef\x83\x62\xab\xf9\x74\x5b\xcc\x27\x53\x7c\x14\xdf\x23\x9f\x9d\x7d\xe2\x1c\xbe\x9b\xd2\x61\xe9\xe0\x07\x0a\x89\x04\xbd\x5b\xf1\x88\x50\xac\x83\x08\x38\x1f\x9d\x9e\x64\x16\x73\xa7\x4c\x09\xb9\x16\xd6\x0e\x59\xde\x54\xf0\x06\xc4\x46\xa7\x27\x00\x00\x59\xd1\x0f\x80\x29\xbf\x04\x87\x4b\xc7\xa5\xa0\xa7\x90\xf7\xcf\xf5\x12\xf3\xca\x21\xdc\x8b\x1a\xc6\x77\x37\x9b\x44\x66\xa7\x42\x6b\xb0\x6e\xa5\xd1\x37\xd0\x86\x52\x20\x94\x03\x36\xfa\x2d\xa8\x54\xe5\x63\x0a\xd8\x16\x0b\x07\x2b\x53\x11\x98\xba\x04\x52\xf6\x29\x4b\xd6\xc5\x81\x46\x52\xf4\x3d\xe7\xa4\x25\xed\xdf\xbd\xcc\x24\xde\xa5\xfd\xa6\xb4\x57\x4d\x52\x2d\x42\x8a\x4c\xbd\x2d\x65\x3b\x95\x1b\xcd\xa7\x92\xf7\xbf\x6e\x03\x0e\x40\x82\xe4\x7e\xfe\x18\x26\xf0\xab\x95\x2b\xf8\xc4\xd0\xd6\x88\x0f\x4a\x8b\xab\x50\x39\x31\x4b\xee\x94\xd3\xc8\x46\xd7\xa5\x43\x6a\x46\x34\xbe\xbb\x81\x79\x85\xb4\x8a\xb3\xa4\xb8\x3a\xd6\x3c\x91\x6a\x71\xec\xbc\x19\x99\xbf\x75\x7b\x5c\xef\x72\x9f\x18\xb9\xea\x64\x7b\xbc\xd5\x6b\xda\x3b\x46\x10\x0a\x50\x72\xc8\x70\x89\x7f\xec\x5c\x33\x20\x53\xdb\x21\xfb\xc6\x60\xa6\x45\x8e\x85\xd1\x12\x69\xc8\x70\xa3\xd1\xce\x75\xab\x31\x8e\x59\x70\x50\xad\xa4\x2b\x52\xe8\x5f\x5e\x7e\x1e\xb0\x51\x96\x84\xbb\xbb\xa8\x75\x8c\xe1\x23\xb4\x05\x14\x84\x0f\x43\x76\xc6\x5e\x77\xe1\x4a\x98\xb8\x92\xcf\x48\x4d\x05\xad\x18\x98\x32\xd7\x2a\x7f\x5a\xab\x1a\xdf\xdd\xf4\x2e\x92\x56\xde\x45\xc4\x46\xad\xad\xb3\xa4\x8b\xdc\xff\x77\x59\x8f\x25\xf4\x59\x07\xdd\x5d\x3a\x9d\xd0\x9e\x77\x78\x24\x4e\xbc\x47\xfc\xda\x3f\xe8\x90\x07\x63\xdc\x1b\x8e\xf6\x70\xbf\x7f\x42\x5b\x69\x67\xbb\x70\xfe\xb9\x6f\x20\x6f\xcb\xe9\xc8\x36\xf6\x26\x53\x77\xb0\x7e\xff\xb3\x68\x74\x1c\x96\xef\x97\x6e\xc7\xe1\x7d\xe7\xe7\x64\x73\x52\x33\xd7\x22\x1e\xaa\xb2\xf9\x1f\xb5\x3b\xac\x48\x47\xf0\xbc\xb9\x6d\x21\x1a\xc3\x0f\xe1\xbc\xc7\xce\xc2\x47\x12\xc5\x0b\xa1\x7b\xd1\x60\x83\x3b\x8f\xc5\x5f\xb1\xec\x3d\xef\x72\xab\x48\xa7\x15\xe9\x2f\xbb\xa7\x6e\x35\xc3\x94\xdd\xfe\x1c\xff\x62\x7b\x19\x29\x9c\x48\xed\x7c\xbf\xc0\x56\x79\x8e\xd6\xa6\x81\x6c\xaf\x59\x56\xf4\x7c\x38\x30\xcf\x32\xac\x32\x8a\x0b\x37\xd5\x01\x3c\xd8\x05\xbf\x6c\xc2\x97\x90\x7b\x59\x4f\x2a\x8c\xe7\x5f\x00\x00\x00\xff\xff\x07\x8e\xff\xf5\xad\x06\x00\x00")

func sqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlTmpl,
		"sql.tmpl",
	)
}

func sqlTmpl() (*asset, error) {
	bytes, err := sqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql.tmpl", size: 1709, mode: os.FileMode(438), modTime: time.Unix(1579239977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x41\x8f\xda\x3c\x10\xbd\xf3\x2b\xfc\xf9\x5b\x69\x41\x6d\xb0\xd8\x5d\xf5\xb0\x0d\xb9\x6c\x0f\xbd\x54\xaa\xd4\x4a\xed\xad\x32\xf1\x90\x18\x19\x3b\x1d\x1b\x76\x57\x88\xff\x5e\xd9\x49\x20\x09\xc9\x6e\xf6\xd0\x72\x80\x38\xf3\x3c\xcf\xef\x79\x98\x89\xff\x8b\x22\xf2\x60\xb4\x03\xed\xc8\x67\xe0\x02\x90\x4c\xbf\xf2\x0c\x48\x1e\x16\x33\x12\x45\xc9\x24\xb6\x90\x3a\x69\x34\x49\x15\xb7\x76\x49\xd3\x72\x43\x54\x62\x68\x32\x21\x84\x90\x58\xc8\x7d\x13\xc0\xa5\x06\x8c\xd6\x6a\x27\x45\x85\xe8\xa2\xd0\x3c\x92\xed\x2a\xba\x69\x84\x2f\x13\xa9\xc8\x6e\xa3\x0f\x1d\x48\x80\xe5\x8b\xe4\x3b\x5f\x29\x88\x59\xbe\xe8\x64\x60\x42\xee\x1b\x9c\xe7\x65\xf9\x18\x54\xb3\x79\xe7\x94\xa5\x54\x56\x69\x4d\x26\x93\x00\xfb\xc2\xa5\x26\x95\xe0\x97\xcc\xe8\x71\x01\xcd\xe3\x80\x72\x2f\x6b\xf1\xa2\x6e\x8e\xa2\x4f\x73\x07\xd2\xbe\x81\x4b\x87\x6e\x5b\x60\x27\x9d\x02\x9a\x1c\x0e\xf3\xf0\x74\x3c\xc6\x2c\xbf\xed\x21\x69\xbb\x77\x7a\x5d\x99\x76\xa6\x0d\x76\xbc\x7a\xc4\x95\x11\xcf\x43\x07\xf4\x58\x29\x96\x14\x9e\xf8\xb6\x50\xf0\xeb\x11\x79\x51\x00\xd2\x3a\x81\xe0\x8e\x87\x3b\xb6\x75\x88\x08\x17\xad\x8c\x71\xd6\x21\x2f\xee\x68\x72\xe1\x77\x4f\xf5\x2c\x6e\x88\x7f\xda\x0a\x5f\x47\x55\x05\x8c\x43\x5d\x60\x87\x29\x68\x12\x3b\x7f\xd2\xa6\x9e\x93\x8e\x32\x12\xbe\xa3\x95\x41\x01\x08\xa2\x5a\xe6\x66\xef\x55\xd5\x42\x29\x41\xa3\x60\x49\x33\x94\x7d\x05\xd0\xeb\xa2\xf3\xd7\x31\x16\x8b\x15\x41\xbb\x38\x5f\xfb\x1c\x0e\xc8\x75\x06\x64\x9e\x1a\x65\xc9\xf1\x38\x7a\x63\xec\x72\x5f\x70\xbe\xd6\x5c\xfe\x16\x3e\xd0\x62\x24\x4d\xcc\x1c\x8e\x54\xcf\xde\x64\xd5\xda\x18\x37\xda\xd6\x71\xc0\x7f\xe9\xe3\x5f\xf3\x70\x9c\x2f\x31\x0b\x05\xde\xfa\x2b\xf5\x77\x81\x81\x7e\xf3\x7a\x1b\xf2\xad\xe5\xa2\x09\xf5\xec\x6b\xec\x09\xf0\xbe\xc9\xd0\xc4\x19\x75\xca\xda\x9c\x1d\x65\xd4\x4f\xad\xce\xa4\x68\xcc\x93\xf3\x94\x48\x51\x16\x95\x4d\x57\xd3\xf5\x4e\x97\x43\x63\x3a\x23\x87\x13\xdf\xd5\xf4\xfa\xff\xaa\x55\x5c\xcf\xe6\x9f\xea\x1e\x30\x3d\xb4\x4e\x4f\x0b\x9e\x49\x9d\xd1\x7b\xe2\x70\x07\xef\xdb\x31\x05\x3a\x73\xf9\x43\xee\xab\x8a\xde\x93\x35\x57\xb6\x0b\xb1\xc0\x31\xcd\xcb\x0c\x7d\xf1\xd0\x8f\x06\x09\xa4\x5e\x9b\xfe\x08\xdf\x39\xf3\x43\x0a\x97\x0f\xf1\xa6\x68\x94\xfa\xd9\xbf\xb9\x40\x93\x82\xb5\x83\xb4\x16\x70\x0f\xf8\x4d\x0a\x18\x20\xdf\xf0\x27\x7a\x4f\x68\x59\x64\x8c\x92\x77\x84\x9e\x07\x5b\x58\x32\xdf\x54\xe9\x69\xdb\x71\xf6\x71\x52\xff\xc6\xac\xbe\x9e\xf2\xee\x4e\xd6\xdb\xe6\xe5\x11\x8b\xe9\x92\x5a\xc7\x9d\x4c\x19\x17\x5b\xa9\x95\x03\x56\xa8\x5d\x26\xb5\x0d\xd9\x03\xb9\x65\x9b\xdf\x3b\xc0\xe7\xf9\x79\x5a\xcd\x37\xd6\xcf\x90\x9a\xe4\x8d\xf9\xa2\x95\xbd\x63\x9b\xf2\x4d\x95\xef\x3c\xf2\x3a\xa9\xff\x04\x00\x00\xff\xff\x42\xc5\xe1\xc5\xc1\x09\x00\x00")

func tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_tableTmpl,
		"table.tmpl",
	)
}

func tableTmpl() (*asset, error) {
	bytes, err := tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "table.tmpl", size: 2497, mode: os.FileMode(438), modTime: time.Unix(1579182501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"add_cmd.tmpl":       add_cmdTmpl,
	"datatable.tmpl":     datatableTmpl,
	"exe_cmd.tmpl":       exe_cmdTmpl,
	"footer.tmpl":        footerTmpl,
	"header.tmpl":        headerTmpl,
	"index.html":         indexHtml,
	"jquery.tmpl":        jqueryTmpl,
	"navbar.tmpl":        navbarTmpl,
	"sidebar.tmpl":       sidebarTmpl,
	"sidebar_right.tmpl": sidebar_rightTmpl,
	"signin.html":        signinHtml,
	"sql.tmpl":           sqlTmpl,
	"table.tmpl":         tableTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"add_cmd.tmpl":       &bintree{add_cmdTmpl, map[string]*bintree{}},
	"datatable.tmpl":     &bintree{datatableTmpl, map[string]*bintree{}},
	"exe_cmd.tmpl":       &bintree{exe_cmdTmpl, map[string]*bintree{}},
	"footer.tmpl":        &bintree{footerTmpl, map[string]*bintree{}},
	"header.tmpl":        &bintree{headerTmpl, map[string]*bintree{}},
	"index.html":         &bintree{indexHtml, map[string]*bintree{}},
	"jquery.tmpl":        &bintree{jqueryTmpl, map[string]*bintree{}},
	"navbar.tmpl":        &bintree{navbarTmpl, map[string]*bintree{}},
	"sidebar.tmpl":       &bintree{sidebarTmpl, map[string]*bintree{}},
	"sidebar_right.tmpl": &bintree{sidebar_rightTmpl, map[string]*bintree{}},
	"signin.html":        &bintree{signinHtml, map[string]*bintree{}},
	"sql.tmpl":           &bintree{sqlTmpl, map[string]*bintree{}},
	"table.tmpl":         &bintree{tableTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
